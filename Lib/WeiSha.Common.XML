<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeiSha.Common</name>
    </assembly>
    <members>
        <member name="T:com.google.zxing.ReaderException">
            <summary> The general exception class throw when something goes wrong during decoding of a barcode.
            This includes, but is not limited to, failing checksums / error correction algorithms, being
            unable to locate finder timing patterns, and so on.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.qrcode.detector.AlignmentPattern">
            <summary> <p>Encapsulates an alignment pattern, which are the smaller square patterns found in
            all but the simplest QR Codes.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.ResultPoint">
            <summary> <p>Encapsulates a point of interest in an image containing a barcode. Typically, this
            would be the location of a finder pattern or the corner of the barcode, for example.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- 对于成员“M:com.google.zxing.ResultPoint.orderBestPatterns(com.google.zxing.ResultPoint[])”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.ResultPoint.distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)">
            <returns> distance between two points
            </returns>
        </member>
        <member name="M:com.google.zxing.ResultPoint.crossProductZ(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)">
            <summary> Returns the z component of the cross product between vectors BC and BA.</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPattern.aboutEquals(System.Single,System.Single,System.Single)">
            <summary> <p>Determines if this alignment pattern "about equals" an alignment pattern at the stated
            position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DecodedBitStreamParser">
            <summary> <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes
            in one QR Code. This class decodes the bits back into text.</p>
            
            <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.DecodedBitStreamParser.ALPHANUMERIC_CHARS">
            <summary> See ISO 18004:2006, 6.4.4 Table 5</summary>
        </member>
        <member name="T:com.google.zxing.oned.EAN13Writer">
            <summary> This object renders an EAN13 code as a ByteMatrix 2D array of greyscale
            values.
            
            </summary>
            <author>  aripollak@gmail.com (Ari Pollak)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.oned.UPCEANWriter">
            <summary> <p>Encapsulates functionality and implementation that is common to UPC and EAN families
            of one-dimensional barcodes.</p>
            
            </summary>
            <author>  aripollak@gmail.com (Ari Pollak)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.Writer">
            <summary> The base class for all objects which encode/generate a barcode image.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.Writer.encode(System.String,com.google.zxing.BarcodeFormat,System.Int32,System.Int32)">
            <summary> Encode a barcode using the default settings.
            
            </summary>
            <param name="contents">The contents to encode in the barcode
            </param>
            <param name="format">The barcode format to generate
            </param>
            <param name="width">The preferred width in pixels
            </param>
            <param name="height">The preferred height in pixels
            </param>
            <returns> The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:com.google.zxing.Writer.encode(System.String,com.google.zxing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary> </summary>
            <param name="contents">The contents to encode in the barcode
            </param>
            <param name="format">The barcode format to generate
            </param>
            <param name="width">The preferred width in pixels
            </param>
            <param name="height">The preferred height in pixels
            </param>
            <param name="hints">Additional parameters to supply to the encoder
            </param>
            <returns> The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANWriter.renderResult(System.SByte[],System.Int32,System.Int32)">
            <returns> a byte array of horizontal pixels (0 = white, 1 = black) 
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANWriter.appendPattern(System.SByte[],System.Int32,System.Int32[],System.Int32)">
            <summary> Appends the given pattern to the target array starting at pos.
            
            </summary>
            <param name="startColor">starting color - 0 for white, 1 for black
            </param>
            <returns> the number of elements added to target.
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANWriter.encode(System.String)">
            <returns> a byte array of horizontal pixels (0 = white, 1 = black) 
            </returns>
        </member>
        <member name="T:com.google.zxing.oned.EAN13Reader">
            <summary> <p>Implements decoding of the EAN-13 format.</p>
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>  alasdair@google.com (Alasdair Mackintosh)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.oned.UPCEANReader">
            <summary> <p>Encapsulates functionality and implementation that is common to UPC and EAN families
            of one-dimensional barcodes.</p>
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>  alasdair@google.com (Alasdair Mackintosh)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.oned.OneDReader">
            <summary> Encapsulates functionality and implementation that is common to all families
            of one-dimensional barcodes.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.Reader">
            <summary> Implementations of this interface can decode an image of a barcode in some format into
            the String it encodes. For example, {@link com.google.zxing.qrcode.QRCodeReader} can
            decode a QR code. The decoder may optionally receive hints from the caller which may help
            it decode more quickly or accurately.
            
            See {@link com.google.zxing.MultiFormatReader}, which attempts to determine what barcode
            format is present within the image as well, and then decodes it accordingly.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.Reader.decode(com.google.zxing.BinaryBitmap)">
            <summary> Locates and decodes a barcode in some format within an image.
            
            </summary>
            <param name="image">image of barcode to decode
            </param>
            <returns> String which the barcode encodes
            </returns>
            <throws>  ReaderException if the barcode cannot be located or decoded for any reason </throws>
        </member>
        <member name="M:com.google.zxing.Reader.decode(com.google.zxing.BinaryBitmap,System.Collections.Hashtable)">
            <summary> Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            
            </summary>
            <param name="image">image of barcode to decode
            </param>
            <param name="hints">passed as a {@link java.util.Hashtable} from {@link com.google.zxing.DecodeHintType}
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.
            </param>
            <returns> String which the barcode encodes
            </returns>
            <throws>  ReaderException if the barcode cannot be located or decoded for any reason </throws>
        </member>
        <member name="M:com.google.zxing.oned.OneDReader.doDecode(com.google.zxing.BinaryBitmap,System.Collections.Hashtable)">
            <summary> We're going to examine rows from the middle outward, searching alternately above and below the
            middle, and farther out each time. rowStep is the number of rows between each successive
            attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then
            middle + rowStep, then middle - (2 * rowStep), etc.
            rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily
            decided that moving up and down by about 1/16 of the image is pretty good; we try more of the
            image if "trying harder".
            
            </summary>
            <param name="image">The image to decode
            </param>
            <param name="hints">Any hints that were requested
            </param>
            <returns> The contents of the decoded barcode
            </returns>
            <throws>  ReaderException Any spontaneous errors which occur </throws>
        </member>
        <member name="M:com.google.zxing.oned.OneDReader.recordPattern(com.google.zxing.common.BitArray,System.Int32,System.Int32[])">
            <summary> Records the size of successive runs of white and black pixels in a row, starting at a given point.
            The values are recorded in the given array, and the number of runs recorded is equal to the size
            of the array. If the row starts on a white pixel at the given start point, then the first count
            recorded is the run of white pixels starting from that point; likewise it is the count of a run
            of black pixels if the row begin on a black pixels at that point.
            
            </summary>
            <param name="row">row to count from
            </param>
            <param name="start">offset into row to start at
            </param>
            <param name="counters">array into which to record counts
            </param>
            <throws>  ReaderException if counters cannot be filled entirely from row before running out </throws>
            <summary>  of pixels
            </summary>
        </member>
        <member name="M:com.google.zxing.oned.OneDReader.patternMatchVariance(System.Int32[],System.Int32[],System.Int32)">
            <summary> Determines how closely a set of observed counts of runs of black/white values matches a given
            target pattern. This is reported as the ratio of the total variance from the expected pattern
            proportions across all pattern elements, to the length of the pattern.
            
            </summary>
            <param name="counters">observed counters
            </param>
            <param name="pattern">expected pattern
            </param>
            <param name="maxIndividualVariance">The most any counter can differ before we give up
            </param>
            <returns> ratio of total variance between counters and pattern compared to total pattern size,
            where the ratio has been multiplied by 256. So, 0 means no variance (perfect match); 256 means
            the total variance between counters and patterns equals the pattern length, higher values mean
            even more variance
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.OneDReader.decodeRow(System.Int32,com.google.zxing.common.BitArray,System.Collections.Hashtable)">
            <summary> <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            
            </summary>
            <param name="rowNumber">row number from top of the row
            </param>
            <param name="row">the black/white pixel data of the row
            </param>
            <param name="hints">decode hints
            </param>
            <returns> {@link Result} containing encoded string and start/end of barcode
            </returns>
            <throws>  ReaderException if an error occurs or barcode cannot be found </throws>
        </member>
        <member name="F:com.google.zxing.oned.UPCEANReader.START_END_PATTERN">
            <summary> Start/end guard pattern.</summary>
        </member>
        <member name="F:com.google.zxing.oned.UPCEANReader.MIDDLE_PATTERN">
            <summary> Pattern marking the middle of a UPC/EAN pattern, separating the two halves.</summary>
        </member>
        <member name="F:com.google.zxing.oned.UPCEANReader.L_PATTERNS">
            <summary> "Odd", or "L" patterns used to encode UPC/EAN digits.</summary>
        </member>
        <member name="F:com.google.zxing.oned.UPCEANReader.L_AND_G_PATTERNS">
            <summary> As above but also including the "even", or "G" patterns used to encode UPC/EAN digits.</summary>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.decodeRow(System.Int32,com.google.zxing.common.BitArray,System.Int32[],System.Collections.Hashtable)">
            <summary> <p>Like {@link #decodeRow(int, BitArray, java.util.Hashtable)}, but
            allows caller to inform method about where the UPC/EAN start pattern is
            found. This allows this to be computed once and reused across many implementations.</p>
            </summary>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.checkChecksum(System.String)">
            <returns> {@link #checkStandardUPCEANChecksum(String)}
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.checkStandardUPCEANChecksum(System.String)">
            <summary> Computes the UPC/EAN checksum on a string of digits, and reports
            whether the checksum is correct or not.
            
            </summary>
            <param name="s">string of digits to check
            </param>
            <returns> true iff string of digits passes the UPC/EAN checksum algorithm
            </returns>
            <throws>  ReaderException if the string does not contain only digits </throws>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.findGuardPattern(com.google.zxing.common.BitArray,System.Int32,System.Boolean,System.Int32[])">
            <param name="row">row of black/white values to search
            </param>
            <param name="rowOffset">position to start search
            </param>
            <param name="whiteFirst">if true, indicates that the pattern specifies white/black/white/...
            pixel counts, otherwise, it is interpreted as black/white/black/...
            </param>
            <param name="pattern">pattern of counts of number of black and white pixels that are being
            searched for as a pattern
            </param>
            <returns> start/end horizontal offset of guard pattern, as an array of two ints
            </returns>
            <throws>  ReaderException if pattern is not found </throws>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.decodeDigit(com.google.zxing.common.BitArray,System.Int32[],System.Int32,System.Int32[][])">
            <summary> Attempts to decode a single UPC/EAN-encoded digit.
            
            </summary>
            <param name="row">row of black/white values to decode
            </param>
            <param name="counters">the counts of runs of observed black/white/black/... values
            </param>
            <param name="rowOffset">horizontal offset to start decoding from
            </param>
            <param name="patterns">the set of patterns to use to decode -- sometimes different encodings
            for the digits 0-9 are used, and this indicates the encodings for 0 to 9 that should
            be used
            </param>
            <returns> horizontal offset of first pixel beyond the decoded digit
            </returns>
            <throws>  ReaderException if digit cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.oned.UPCEANReader.decodeMiddle(com.google.zxing.common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary> Subclasses override this to decode the portion of a barcode between the start
            and end guard patterns.
            
            </summary>
            <param name="row">row of black/white values to search
            </param>
            <param name="startRange">start/end offset of start guard pattern
            </param>
            <param name="resultString">{@link StringBuffer} to append decoded chars to
            </param>
            <returns> horizontal offset of first pixel after the "middle" that was decoded
            </returns>
            <throws>  ReaderException if decoding could not complete successfully </throws>
        </member>
        <member name="P:com.google.zxing.oned.UPCEANReader.BarcodeFormat">
            <summary> Get the format of this decoder.
            
            </summary>
            <returns> The 1D format.
            </returns>
        </member>
        <member name="M:com.google.zxing.oned.EAN13Reader.determineFirstDigit(System.Text.StringBuilder,System.Int32)">
            <summary> Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded
            digits in a barcode, determines the implicitly encoded first digit and adds it to the
            result string.
            
            </summary>
            <param name="resultString">string to insert decoded first digit into
            </param>
            <param name="lgPatternFound">int whose bits indicates the pattern of odd/even L/G patterns used to
            encode digits
            </param>
            <throws>  ReaderException if first digit cannot be determined </throws>
        </member>
        <member name="T:com.google.zxing.datamatrix.detector.Detector">
            <summary> <p>Encapsulates logic that can detect a Data Matrix Code in an image, even if the Data Matrix Code
            is rotated or skewed, or partially obscured.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.datamatrix.detector.Detector.detect">
            <summary> <p>Detects a Data Matrix Code in an image.</p>
            
            </summary>
            <returns> {@link DetectorResult} encapsulating results of detecting a QR Code
            </returns>
            <throws>  ReaderException if no Data Matrix Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.detector.Detector.increment(System.Collections.Hashtable,com.google.zxing.ResultPoint)">
            <summary> Increments the Integer associated with a key by one.</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.detector.Detector.transitionsBetween(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)">
            <summary> Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.</summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.detector.Detector.ResultPointsAndTransitions">
            <summary> Simply encapsulates two points and a number of transitions between them.</summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.detector.Detector.ResultPointsAndTransitionsComparator">
            <summary> Orders ResultPointsAndTransitions by number of transitions, ascending.</summary>
        </member>
        <member name="T:com.google.zxing.common.Comparator">
            <summary> This is merely a clone of <code>Comparator</code> since it is not available in
            CLDC 1.1 / MIDP 2.0.
            </summary>
        </member>
        <member name="T:com.google.zxing.client.result.TelResultParser">
            <summary> Parses a "tel:" URI result, which specifies a phone number.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.ResultParser">
            <summary> <p>Abstract class representing the result of decoding a barcode, as more than
            a String -- as some type of structured data. This might be a subclass which represents
            a URL, or an e-mail address. {@link #parseResult(com.google.zxing.Result)} will turn a raw
            decoded string into the most appropriate type of structured representation.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.optional.NDEFURIResultParser">
            <summary> Recognizes an NDEF message that encodes a URI according to the
            "URI Record Type Definition" specification.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.optional.AbstractNDEFResultParser">
            <summary> <p>Superclass for classes encapsulating results in the NDEF format.
            See <a href="http://www.nfc-forum.org/specs/">http://www.nfc-forum.org/specs/</a>.</p>
            
            <p>This code supports a limited subset of NDEF messages, ones that are plausibly
            useful in 2D barcode formats. This generally includes 1-record messages, no chunking,
            "short record" syntax, no ID field.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.AddressBookAUResultParser">
            <summary> Implements KDDI AU's address book format. See
            <a href="http://www.au.kddi.com/ezfactory/tec/two_dimensions/index.html">
            http://www.au.kddi.com/ezfactory/tec/two_dimensions/index.html</a>.
            (Thanks to Yuzo for translating!)
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.Binarizer">
            <summary> This class hierarchy provides a set of methods to convert luminance data to 1 bit data.
            It allows the algorithm to vary polymorphically, for example allowing a very expensive
            thresholding technique for servers and a fast one for mobile. It also permits the implementation
            to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- 对于成员“M:com.google.zxing.Binarizer.getBlackRow(System.Int32,com.google.zxing.common.BitArray)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.Binarizer.createBinarizer(com.google.zxing.LuminanceSource)">
            <summary> Creates a new object with the same type as this Binarizer implementation, but with pristine
            state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache
            of 1 bit data. See Effective Java for why we can't use Java's clone() method.
            
            </summary>
            <param name="source">The LuminanceSource this Binarizer will operate on.
            </param>
            <returns> A new concrete Binarizer implementation object.
            </returns>
        </member>
        <member name="P:com.google.zxing.Binarizer.BlackMatrix">
            <summary> Converts a 2D array of luminance data to 1 bit data. As above, assume this method is expensive
            and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
            may not apply sharpening. Therefore, a row from this matrix may not be identical to one
            fetched using getBlackRow(), so don't mix and match between them.
            
            </summary>
            <returns> The 2D array of bits for the image (true means black).
            </returns>
        </member>
        <member name="T:WeiSha.Common.CustomConfig">
            <summary>
            自定义配置，实现一些小范围管理内的参数设置
            说明：基于xml管理的参数设置
            </summary>
        </member>
        <member name="M:WeiSha.Common.CustomConfig.Load(System.String)">
            <summary>
            载信配置信息，创建管理对象
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.CustomConfig.XmlString">
            <summary>
            整个配置项目的字符串（xml文档）
            </summary>
        </member>
        <member name="P:WeiSha.Common.CustomConfig.Items">
            <summary>
            子级配置项
            </summary>
        </member>
        <member name="T:WeiSha.Common.CustomConfigItem">
            <summary>
            配置项的操作对象
            </summary>
        </member>
        <member name="M:WeiSha.Common.CustomConfigItem.Refresh">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:WeiSha.Common.CustomConfigItem.ChildAdd(System.String,System.String)">
            <summary>
            添加子项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:WeiSha.Common.CustomConfigItem.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.CustomConfigItem.Key">
            <summary>
            配置项的Key
            </summary>
        </member>
        <member name="P:WeiSha.Common.CustomConfigItem.Text">
            <summary>
            配置项的值(vlaue)
            </summary>
        </member>
        <member name="P:WeiSha.Common.CustomConfigItem.Childs">
            <summary>
            子级配置项
            </summary>
        </member>
        <member name="T:com.google.zxing.multi.GenericMultipleBarcodeReader">
            <summary> <p>Attempts to locate multiple barcodes in an image by repeatedly decoding portion of the image.
            After one barcode is found, the areas left, above, right and below the barcode's
            {@link com.google.zxing.ResultPoint}s are scanned, recursively.</p>
            
            <p>A caller may want to also employ {@link ByQuadrantReader} when attempting to find multiple
            2D barcodes, like QR Codes, in an image, where the presence of multiple barcodes might prevent
            detecting any one of them.</p>
            
            <p>That is, instead of passing a {@link Reader} a caller might pass
            <code>new ByQuadrantReader(reader)</code>.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.multi.MultipleBarcodeReader">
            <summary> Implementation of this interface attempt to read several barcodes from one image.
            
            </summary>
            <seealso cref="T:com.google.zxing.Reader">
            </seealso>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.DataBlock">
            <summary> <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into
            multiple blocks, each of which is a unit of data and error-correction codewords. Each
            is represented by an instance of this class.</p>
            
            </summary>
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DataBlock.getDataBlocks(System.SByte[],com.google.zxing.datamatrix.decoder.Version)">
            <summary> <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.
            That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This
            method will separate the data into original blocks.</p>
            
            </summary>
            <param name="rawCodewords">bytes as read directly from the Data Matrix Code
            </param>
            <param name="version">version of the Data Matrix Code
            </param>
            <returns> {@link DataBlock}s containing original bytes, "de-interleaved" from representation in the
            Data Matrix Code
            </returns>
        </member>
        <!-- 对于成员“T:com.google.zxing.common.ByteMatrix”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.common.ByteMatrix.ToBitmap">
            <summary>
            Converts this ByteMatrix to a black and white bitmap.
            </summary>
            <returns>A black and white bitmap converted from this ByteMatrix.</returns>
        </member>
        <member name="T:com.google.zxing.client.result.VCardResultParser">
            <summary> Parses contact information formatted according to the VCard (2.1) format. This is not a complete
            implementation but should parse information as commonly encoded in 2D barcodes.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.client.result.VCardResultParser.formatNames(System.String[])">
            <summary> Formats name fields of the form "Public;John;Q.;Reverend;III" into a form like
            "Reverend John Q. Public III".
            
            </summary>
            <param name="names">name values to format, in place
            </param>
        </member>
        <member name="T:com.google.zxing.client.result.ParsedResultType">
            <summary> Represents the type of data encoded by a barcode -- from plain text, to a
            URI, to an e-mail address, etc.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Cute(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            剪切图片
            </summary>
            <param name="source">原始图片对象</param>
            <param name="x">起始X坐标</param>
            <param name="y">起始Y坐标</param>
            <param name="width"></param>
            <param name="height"></param>
            <returns>返回处理后的图片对象</returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Zoom(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
            <summary>
            图片缩放，强制缩放到指定尺寸
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="isDeformation">是否允许变形，如果不允许，则会剪切图形；</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Zoom(System.Drawing.Image,System.Int32)">
            <summary>
            图片缩放，按比例
            </summary>
            <param name="source"></param>
            <param name="percent">原图的尺寸百分比</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Thumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图，非变形生成
            </summary>
            <param name="source">原始图片对象</param>
            <param name="width">缩略图宽</param>
            <param name="height">缩略高</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Thumbnail(System.Drawing.Image,System.Int32)">
            <summary>
            按百分比生成缩略图
            </summary>
            <param name="source">原始图片对象</param>
            <param name="percent">原图的百分之多少</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Thumbnail(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            非变形的生成缩略图，根据宽或高缩放，保持图片缩放时不变形
            </summary>
            <param name="source">原始图片对象</param>
            <param name="width">缩略图宽</param>
            <param name="height">缩略高</param>
            <param name="restrainObj">约束对象，1为度，2为高，0为自适应</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Overlay(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            图片叠加
            </summary>
            <param name="source">原图片对象</param>
            <param name="img">叠加的图片对象</param>
            <param name="x">起始X坐标</param>
            <param name="y">起始Y坐标</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Overlay(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            图片叠加，可以设置透明度，即水印图片添加
            </summary>
            <param name="source"></param>
            <param name="img">叠加的图片对象</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="opacity">透明度，0为完全透明，100为不透明</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Overlay(System.Drawing.Image,System.Drawing.Image,System.String,System.Int32)">
            <summary>
            图片叠加
            </summary>
            <param name="source">原图片对象</param>
            <param name="img">要叠加的图片对象</param>
            <param name="overType">叠加的类型，分为左left、右right、上top、下down、中cengter；另分为左上、左下、右上、右下;</param>
            <param name="opacity">透明度，0为完全透明，100为不透明</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Overlay(System.Drawing.Image,System.String,System.String,System.Int32)">
            <summary>
            叠加文字
            </summary>
            <param name="source">原图片对象</param>
            <param name="text">在叠加的字符串</param>
            <param name="overType">叠加的类型，分为左left、右right、上top、下down、中cengter；另分为左上、左下、右上、右下;</param>
            <param name="opacity">透明度，0为完全透明，100为不透明</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Overlay(System.Drawing.Image,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            叠加文字
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <param name="overType">叠加的类型，分为左left、右right、上top、下down、中cengter；另分为左上、左下、右上、右下;</param>
            <param name="opacity">透明度，0为完全透明，100为不透明</param>
            <param name="size">字符大小</param>
            <param name="font">字体</param>
            <param name="color">文字颜色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.FromString(System.String)">
            <summary>
            将文本创建成图片对象
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.FromString(System.String,System.Int32,System.String,System.String)">
            <summary>
            将文本创建成图片对象
            </summary>
            <param name="text">要创建图像的字符串</param>
            <param name="size">字符的大小</param>
            <param name="font">字体</param>
            <param name="color">字符颜色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Transparent(System.Drawing.Image,System.Int32)">
            <summary>
            设置图片透明度
            </summary>
            <param name="img">要操作的图片对象</param>
            <param name="opacity">透明度,0为完全透明，100为不透明</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Border(System.Drawing.Image)">
            <summary>
            给图片生成一个边框
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.ToBase64(System.Drawing.Image)">
            <summary>
            图片文件转Base64
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.FromBase64(System.String)">
            <summary>
            Base64字符串转图片对象
            </summary>
            <param name="base64string"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Rounded(System.Drawing.Image)">
            <summary>
            图片生成圆角
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.Rounded(System.Drawing.Image,System.String)">
            <summary>
            图片生成圆角
            </summary>
            <param name="image"></param>
            <param name="cornerLocation">圆角位置，参数：TopLeft,TopRight,BottomLeft,BottomRight</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.ImageTo.BitmapCrop(System.Drawing.Bitmap,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            图片不规则截图
            </summary>
            <param name="bitmap">原图</param>
            <param name="path">裁剪路径</param>
            <returns></returns>
        </member>
        <member name="F:WeiSha.Common.Business.Version">
            <summary>
            当前程序集版本号
            </summary>
        </member>
        <member name="F:WeiSha.Common.Business.AppVersion">
            <summary>
            应用层的程序集版本号
            </summary>
        </member>
        <member name="M:WeiSha.Common.Business.Do``1">
            <summary>
            IOC的入口
            </summary>
            <typeparam name="IBusinessDo"></typeparam>
            <returns></returns>
        </member>
        <member name="T:WeiSha.Common.PageHelper">
            <summary>
            webpage的增强
            </summary>
        </member>
        <member name="M:WeiSha.Common.PageHelper.Alert(System.Web.UI.Page,System.String)">
            <summary>
            弹出提示
            </summary>
            <param name="page"></param>
            <param name="say"></param>
        </member>
        <member name="M:WeiSha.Common.Data.EntityBind(System.Web.UI.WebControls.Panel,System.Object)">
            <summary>
            将实体的值绑定到控件
            </summary>
            <param name="panel"></param>
            <param name="entity"></param>
        </member>
        <member name="M:WeiSha.Common.Data.EntityBind(System.Web.UI.Control,System.Object)">
            <summary>
            递归设置控件的值
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Data._entityBindSingle(System.Web.UI.Control,System.Object)">
            <summary>
            向单个控件绑定
            </summary>
            <param name="control"></param>
            <param name="entity"></param>
        </member>
        <member name="M:WeiSha.Common.Data._controlBindFunc(System.Web.UI.Control,System.Object)">
            <summary>
            向控件赋值
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToFlv">
            <summary>
            转换为Flv视频格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToFlv(System.Int32)">
            <summary>
            转换为Flv视频格式
            </summary>
            <param name="qscale">视频质量(1-255)，值越小质量越高输出文件就越大,50以后质量就非常糟糕了；ffmpeg官方解释：固定的视频量化标度</param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToFlv(System.String,System.Int32)">
            <summary>
            转换为Flv视频格式
            </summary>
            <param name="newName">指定新的文件名，此处不包括扩展名，系统自动加上.flv</param>
            <param name="qscale"></param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToFlv(System.String,System.String,System.Int32)">
            <summary>
            转换为Flv视频格式
            </summary>
            <param name="newPath">指定输出文件的所在路径</param>
            <param name="newName"></param>
            <param name="qscale"></param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToMP4(System.Int32,System.Boolean)">
            <summary>
            转换为MP4
            </summary>
            <param name="qscale">视频质量，后边的值越小质量越高，但是输出文件就越大；ffmpeg官方解释：固定的视频量化标度</param>
            <param name="isCover">是否覆盖已经转换的视频，如果为flase将跳过；如果为true将删除已经生成的</param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToMP4(System.String,System.Int32,System.Boolean)">
            <summary>
            转换为MP4
            </summary>
            <param name="newName">指定新的文件名，此处不包括扩展名，系统自动加上.mp4</param>
            <param name="qscale"></param>
            <param name="isCover"></param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.ToMP4(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            转换为MP4
            </summary>
            <param name="newPath">指定输出文件的所在路径</param>
            <param name="newName"></param>
            <param name="qscale"></param>
            <param name="isCover"></param>
            <returns>视频完整路径名</returns>
        </member>
        <member name="M:WeiSha.Common.VideoConverter.IVideoHanlder.GetImage">
            <summary>
            获取视频截图
            </summary>
            <returns>图片完整路径名</returns>
        </member>
        <member name="P:WeiSha.Common.VideoConverter.IVideoHanlder.VideoObj">
            <summary>
            要操作的视频对象
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoConverter.MencoderHandler.VideoObj">
            <summary>
            被操作的视频文件
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoConverter.FfmpegHandler.VideoObj">
            <summary>
            被操作的视频文件
            </summary>
        </member>
        <member name="T:WeiSha.Common.Templates.TemplateBank">
            <summary>
            模板库对象
            </summary>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateBank.#ctor(System.IO.DirectoryInfo,WeiSha.Common.Templates.TemplateConfingItem)">
            <summary>
            构建模板库
            </summary>
            <param name="di">模板库所在的路径</param>
            <param name="config">当前模板库的配置项</param>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateBank._init(System.IO.DirectoryInfo)">
            <summary>
            初始化
            </summary>
            <param name="di"></param>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateBank._getPages(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            获取模板库下的文件列表，仅文件名，不包括后缀名
            </summary>
            <param name="root">模板根路径</param>
            <param name="di">当前路径</param>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateBank._creatXML(System.String)">
            <summary>
            当配置文件不存在时，创建配置文件
            </summary>
            <param name="xmlPath"></param>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateBank.PageExists(System.String)">
            <summary>
            页面是否存在于模板库
            </summary>
            <param name="pageName">页面文件，不含后缀名</param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Name">
            <summary>
            模板的名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Tag">
            <summary>
            模板的标识，即模板所在文件夹的名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Author">
            <summary>
            模板的作者
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.CrtTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.QQ">
            <summary>
            作者QQ
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Phone">
            <summary>
            作者QQ
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Intro">
            <summary>
            模板说明
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Size">
            <summary>
            模板的文件总大小,换算成mb或kb为单位
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Length">
            <summary>
            模板的文件总大小,单位字节
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Logo">
            <summary>
            模板的Logo,这里是其图片路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Path">
            <summary>
            模板的文件夹名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.IsCurrent">
            <summary>
            是否是当前使用模板
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Config">
            <summary>
            模板库的配置项
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateBank.Pages">
            <summary>
            当前模板库的文件
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.FormatInformation">
            <summary> <p>Encapsulates a QR Code's format information, including the data mask used and
            error correction level.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
            <seealso cref="P:com.google.zxing.qrcode.decoder.FormatInformation.DataMask">
            </seealso>
            <seealso cref="P:com.google.zxing.qrcode.decoder.FormatInformation.ErrorCorrectionLevel">
            </seealso>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.FormatInformation.FORMAT_INFO_DECODE_LOOKUP">
            <summary> See ISO 18004:2006, Annex C, Table C.1</summary>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.FormatInformation.BITS_SET_IN_HALF_BYTE">
            <summary> Offset i holds the number of 1 bits in the binary representation of i</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.FormatInformation.decodeFormatInformation(System.Int32)">
            <param name="maskedFormatInfo">format info indicator, with mask still applied
            </param>
            <returns> information about the format it specifies, or <code>null</code>
            if doesn't seem to match any known pattern
            </returns>
        </member>
        <member name="T:com.google.zxing.common.reedsolomon.GF256Poly">
            <summary> <p>Represents a polynomial whose coefficients are elements of GF(256).
            Instances of this class are immutable.</p>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256Poly.#ctor(com.google.zxing.common.reedsolomon.GF256,System.Int32[])">
            <param name="field">the {@link GF256} instance representing the field to use
            to perform computations
            </param>
            <param name="coefficients">coefficients as ints representing elements of GF(256), arranged
            from most significant (highest-power term) coefficient to least significant
            </param>
            <throws>  IllegalArgumentException if argument is null or empty, </throws>
            <summary> or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")
            </summary>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256Poly.getCoefficient(System.Int32)">
            <returns> coefficient of x^degree term in this polynomial
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256Poly.evaluateAt(System.Int32)">
            <returns> evaluation of this polynomial at a given point
            </returns>
        </member>
        <member name="P:com.google.zxing.common.reedsolomon.GF256Poly.Degree">
            <returns> degree of this polynomial
            </returns>
        </member>
        <member name="P:com.google.zxing.common.reedsolomon.GF256Poly.Zero">
            <returns> true iff this polynomial is the monomial "0"
            </returns>
        </member>
        <member name="T:com.google.zxing.common.HybridBinarizer">
            <summary> This class implements a local thresholding algorithm, which while slower than the
            GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for
            high frequency images of barcodes with black data on white backgrounds. For this application,
            it does a much better job than a global blackpoint with severe shadows and gradients.
            However it tends to produce artifacts on lower frequency images and is therefore not
            a good general purpose binarizer for uses outside ZXing.
            
            This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers,
            and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already
            inherently local, and only fails for horizontal gradients. We can revisit that problem later,
            but for now it was not a win to use local blocks for 1D.
            
            This Binarizer is the default for the unit tests and the recommended class for library users.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.GlobalHistogramBinarizer">
            <summary> This Binarizer implementation uses the old ZXing global histogram approach. It is suitable
            for low-end mobile devices which don't have enough CPU or memory to use a local thresholding
            algorithm. However, because it picks a global black point, it cannot handle difficult shadows
            and gradients.
            
            Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.BitMatrix">
            <summary> <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common
            module, x is the column position, and y is the row position. The ordering is always x, y.
            The origin is at the top-left.</p>
            
            <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins
            with a new int. This is done intentionally so that we can copy out a row into a BitArray very
            efficiently.</p>
            
            <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,
            meaning they represent lower x values. This is compatible with BitArray's implementation.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.get_Renamed(System.Int32,System.Int32)">
            <summary> <p>Gets the requested bit, where true means black.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
            <returns> value of given bit in matrix
            </returns>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.set_Renamed(System.Int32,System.Int32)">
            <summary> <p>Sets the given bit to true.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.flip(System.Int32,System.Int32)">
            <summary> <p>Flips the given bit.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.setRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Sets a square region of the bit matrix to true.</p>
            
            </summary>
            <param name="left">The horizontal position to begin at (inclusive)
            </param>
            <param name="top">The vertical position to begin at (inclusive)
            </param>
            <param name="width">The width of the region
            </param>
            <param name="height">The height of the region
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitMatrix.getRow(System.Int32,com.google.zxing.common.BitArray)">
            <summary> A fast method to retrieve one row of data from the matrix as a BitArray.
            
            </summary>
            <param name="y">The row to retrieve
            </param>
            <param name="row">An optional caller-allocated BitArray, will be allocated if null or too small
            </param>
            <returns> The resulting BitArray - this reference should always be used even when passing
            your own row
            </returns>
        </member>
        <member name="P:com.google.zxing.common.BitMatrix.Width">
            <returns> The width of the matrix
            </returns>
        </member>
        <member name="P:com.google.zxing.common.BitMatrix.Height">
            <returns> The height of the matrix
            </returns>
        </member>
        <member name="P:com.google.zxing.common.BitMatrix.Dimension">
            <summary> This method is for compatibility with older code. It's only logical to call if the matrix
            is square, so I'm throwing if that's not the case.
            
            </summary>
            <returns> row/column dimension of this matrix
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.GeoParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.ParsedResult">
            <summary> <p>Abstract class representing the result of decoding a barcode, as more than
            a String -- as some type of structured data. This might be a subclass which represents
            a URL, or an e-mail address. {@link ResultParser#parseResult(Result)} will turn a raw
            decoded string into the most appropriate type of structured representation.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="P:com.google.zxing.client.result.GeoParsedResult.Latitude">
            <returns> latitude in degrees
            </returns>
        </member>
        <member name="P:com.google.zxing.client.result.GeoParsedResult.Longitude">
            <returns> longitude in degrees
            </returns>
        </member>
        <member name="P:com.google.zxing.client.result.GeoParsedResult.Altitude">
            <returns> altitude in meters. If not specified, in the geo URI, returns 0.0
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.EmailDoCoMoResultParser">
            <summary> Implements the "MATMSG" email message entry format.
            
            Supported keys: TO, SUB, BODY
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.AbstractDoCoMoResultParser">
            <summary> <p>See
            <a href="http://www.nttdocomo.co.jp/english/service/imode/make/content/barcode/about/s2.html">
            DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.client.result.EmailDoCoMoResultParser.isBasicallyValidEmailAddress(System.String)">
            <summary> This implements only the most basic checking for an email address's validity -- that it contains
            an '@' contains no characters disallowed by RFC 2822. This is an overly lenient definition of
            validity. We want to generally be lenient here since this class is only intended to encapsulate what's
            in a barcode, not "judge" it.
            </summary>
        </member>
        <member name="T:WeiSha.Common.PlatformInfoHandler">
            <summary>
            解析web.config自定义的Platform节点
            </summary>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.GetParaNode(System.String)">
            <summary>
            获取配置的具体参数节点，即某一类参数的节点，如:Upload、Template等
            </summary>
            <param name="xpath">节点路径，例如：Upload、Template等</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.Node(System.String)">
            <summary>
            获取参数节点
            </summary>
            <param name="xpath">节点名称</param>
            <returns></returns>
        </member>
        <member name="T:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode">
            <summary>
            对配置参数的节点的解析；如：Upload节点的属性、子项等
            </summary>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.GetChildren(System.String)">
            <summary>
            通过key值，获取下级子节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.#ctor(System.Xml.XmlNode)">
            <summary>
            构造函数
            </summary>
            <param name="node">参数分类的节点，如：Upload节点</param>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.GetAttr(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.ItemValue(System.String)">
            <summary>
            根据子项(Item)的key值，获取Value值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.Key">
            <summary>
            节点的Key值
            </summary>
        </member>
        <member name="P:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.Value">
            <summary>
            节点的Value值
            </summary>
        </member>
        <member name="P:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.FirstChildren">
            <summary>
            第一个子节点
            </summary>
        </member>
        <member name="P:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.Children">
            <summary>
            所有的子节点对象
            </summary>
        </member>
        <member name="P:WeiSha.Common.PlatformInfoHandler.SiteInfoHandlerParaNode.Item(System.String)">
            <summary>
            获取当前参数节点的属性
            </summary>
            <param name="key">下级节点的Key值</param>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.qrcode.detector.Detector">
            <summary> <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code
            is rotated or skewed, or partially obscured.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.detect">
            <summary> <p>Detects a QR Code in an image, simply.</p>
            
            </summary>
            <returns> {@link DetectorResult} encapsulating results of detecting a QR Code
            </returns>
            <throws>  ReaderException if no QR Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.detect(System.Collections.Hashtable)">
            <summary> <p>Detects a QR Code in an image, simply.</p>
            
            </summary>
            <param name="hints">optional hints to detector
            </param>
            <returns> {@link DetectorResult} encapsulating results of detecting a QR Code
            </returns>
            <throws>  ReaderException if no QR Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,System.Single)">
            <summary> <p>Computes the dimension (number of modules on a size) of the QR Code based on the position
            of the finder patterns and estimated module size.</p>
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.calculateModuleSize(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)">
            <summary> <p>Computes an average estimated module size based on estimated derived from the positions
            of the three finder patterns.</p>
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)">
            <summary> <p>Estimates module size based on two finder patterns -- it uses
            {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the
            width of each, measuring along the axis between their centers.</p>
            </summary>
        </member>
        <!-- 对于成员“M:com.google.zxing.qrcode.detector.Detector.sizeOfBlackWhiteBlackRunBothWays(System.Int32,System.Int32,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.qrcode.detector.Detector.sizeOfBlackWhiteBlackRun(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>This method traces a line from a point in the image, in the direction towards another point.
            It begins in a black region, and keeps going until it finds white, then black, then white again.
            It reports the distance from the start to this point.</p>
            
            <p>This is used when figuring out how wide a finder pattern is, when the finder pattern
            may be skewed or rotated.</p>
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.findAlignmentInRegion(System.Single,System.Int32,System.Int32,System.Single)">
            <summary> <p>Attempts to locate an alignment pattern in a limited region of the image, which is
            guessed to contain it. This method uses {@link AlignmentPattern}.</p>
            
            </summary>
            <param name="overallEstModuleSize">estimated module size so far
            </param>
            <param name="estAlignmentX">x coordinate of center of area probably containing alignment pattern
            </param>
            <param name="estAlignmentY">y coordinate of above
            </param>
            <param name="allowanceFactor">number of pixels in all directions to search from the center
            </param>
            <returns> {@link AlignmentPattern} if found, or null otherwise
            </returns>
            <throws>  ReaderException if an unexpected error occurs during detection </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.Detector.round(System.Single)">
            <summary> Ends up being a bit faster than Math.round(). This merely rounds its argument to the nearest int,
            where x.5 rounds up.
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.Decoder">
            <summary> <p>The main class which implements QR Code decoding -- as opposed to locating and extracting
            the QR Code from an image.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Decoder.decode(System.Boolean[][])">
            <summary> <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.
            "true" is taken to mean a black module.</p>
            
            </summary>
            <param name="image">booleans representing white/black QR Code modules
            </param>
            <returns> text and bytes encoded within the QR Code
            </returns>
            <throws>  ReaderException if the QR Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Decoder.decode(com.google.zxing.common.BitMatrix)">
            <summary> <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or "true" is taken to mean a black module.</p>
            
            </summary>
            <param name="bits">booleans representing white/black QR Code modules
            </param>
            <returns> text and bytes encoded within the QR Code
            </returns>
            <throws>  ReaderException if the QR Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Decoder.correctErrors(System.SByte[],System.Int32)">
            <summary> <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
            correct the errors in-place using Reed-Solomon error correction.</p>
            
            </summary>
            <param name="codewordBytes">data and error correction codewords
            </param>
            <param name="numDataCodewords">number of codewords that are data bytes
            </param>
            <throws>  ReaderException if error correction fails </throws>
        </member>
        <member name="T:com.google.zxing.DecodeHintType">
            <summary> Encapsulates a type of hint that a caller may pass to a barcode reader to help it
            more quickly or accurately decode it. It is up to implementations to decide what,
            if anything, to do with the information that is supplied.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
            <seealso cref="!:Reader.decode(BinaryBitmap,java.util.Hashtable)">
            </seealso>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.OTHER">
            <summary> Unspecified, application-specific hint. Maps to an unspecified {@link Object}.</summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.PURE_BARCODE">
            <summary> Image is a pure monochrome image of a barcode. Doesn't matter what it maps to;
            use {@link Boolean#TRUE}.
            </summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.POSSIBLE_FORMATS">
            <summary> Image is known to be of one of a few possible formats.
            Maps to a {@link java.util.Vector} of {@link BarcodeFormat}s.
            </summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.TRY_HARDER">
            <summary> Spend more time to try to find a barcode; optimize for accuracy, not speed.
            Doesn't matter what it maps to; use {@link Boolean#TRUE}.
            </summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.ALLOWED_LENGTHS">
            <summary> Allowed lengths of encoded data -- reject anything else. Maps to an int[].</summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT">
            <summary> Assume Code 39 codes employ a check digit. Maps to {@link Boolean}.</summary>
        </member>
        <member name="F:com.google.zxing.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            <summary> The caller needs to be notified via callback when a possible {@link ResultPoint}
            is found. Maps to a {@link ResultPointCallback}.
            </summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.Version">
            <summary> The Version object encapsulates attributes about a particular
            size Data Matrix Code.
            
            </summary>
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.Version.getVersionForDimensions(System.Int32,System.Int32)">
            <summary> <p>Deduces version information from Data Matrix dimensions.</p>
            
            </summary>
            <param name="numRows">Number of rows in modules
            </param>
            <param name="numColumns">Number of columns in modules
            </param>
            <returns> {@link Version} for a Data Matrix Code of those dimensions
            </returns>
            <throws>  ReaderException if dimensions do correspond to a valid Data Matrix size </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.Version.buildVersions">
            <summary> See ISO 16022:2006 5.5.1 Table 7</summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.Version.ECBlocks">
            <summary> <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.Version.ECB">
            <summary> <p>Encapsualtes the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the Data Matrix code version's format.</p>
            </summary>
        </member>
        <member name="T:com.google.zxing.common.reedsolomon.ReedSolomonDecoder">
            <summary> <p>Implements Reed-Solomon decoding, as the name implies.</p>
            
            <p>The algorithm will not be explained here, but the following references were helpful
            in creating this implementation:</p>
            
            <ul>
            <li>Bruce Maggs.
            <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
            "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
            <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
            "Chapter 5. Generalized Reed-Solomon Codes"</a>
            (see discussion of Euclidean algorithm)</li>
            </ul>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  William Rucklidge
            </author>
            <author>  sanfordsquires
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.ReedSolomonDecoder.decode(System.Int32[],System.Int32)">
            <summary> <p>Decodes given set of received codewords, which include both data and error-correction
            codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
            in the input.</p>
            
            </summary>
            <param name="received">data and error-correction codewords
            </param>
            <param name="twoS">number of error-correction codewords available
            </param>
            <throws>  ReedSolomonException if decoding fails for any reason </throws>
        </member>
        <member name="T:com.google.zxing.common.DetectorResult">
            <summary> <p>Encapsulates the result of detecting a barcode in an image. This includes the raw
            matrix of black/white pixels corresponding to the barcode, and possibly points of interest
            in the image, like the location of finder patterns or corners of the barcode in the image.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.BitArray">
            <summary> <p>A simple, fast array of bits, represented compactly by an array of ints internally.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.BitArray.get_Renamed(System.Int32)">
            <param name="i">bit to get
            </param>
            <returns> true iff bit i is set
            </returns>
        </member>
        <member name="M:com.google.zxing.common.BitArray.set_Renamed(System.Int32)">
            <summary> Sets bit i.
            
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitArray.flip(System.Int32)">
            <summary> Flips bit i.
            
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitArray.setBulk(System.Int32,System.Int32)">
            <summary> Sets a block of 32 bits, starting at bit i.
            
            </summary>
            <param name="i">first bit to set
            </param>
            <param name="newBits">the new value of the next 32 bits. Note again that the least-significant bit
            corresponds to bit i, the next-least-significant to i+1, and so on.
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitArray.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:com.google.zxing.common.BitArray.isRange(System.Int32,System.Int32,System.Boolean)">
            <summary> Efficient method to check if a range of bits is set, or not set.
            
            </summary>
            <param name="start">start of range, inclusive.
            </param>
            <param name="end">end of range, exclusive
            </param>
            <param name="value">if true, checks that bits in range are set, otherwise checks that they are not set
            </param>
            <returns> true iff all bits are set or not set in range, according to value argument
            </returns>
            <throws>  IllegalArgumentException if end is less than or equal to start </throws>
        </member>
        <member name="M:com.google.zxing.common.BitArray.getBitArray">
            <returns> underlying array of ints. The first element holds the first 32 bits, and the least
            significant bit is bit 0.
            </returns>
        </member>
        <member name="M:com.google.zxing.common.BitArray.reverse">
            <summary> Reverses all bits in the array.</summary>
        </member>
        <member name="T:com.google.zxing.client.result.TextParsedResult">
            <summary> A simple result type encapsulating a string that has no further
            interpretation.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.ISBNResultParser">
            <summary> Parses strings of digits that represent a ISBN.
            
            </summary>
            <author>  jbreiden@google.com (Jeff Breidenbach)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.BizcardResultParser">
            <summary> Implements the "BIZCARD" address book entry format, though this has been
            largely reverse-engineered from examples observed in the wild -- still
            looking for a definitive reference.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.BarcodeFormat">
            <summary> Enumerates barcode formats known to this package.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.QR_CODE">
            <summary>QR Code 2D barcode format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.DATAMATRIX">
            <summary>DataMatrix 2D barcode format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.UPC_E">
            <summary>UPC-E 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.UPC_A">
            <summary>UPC-A 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.EAN_8">
            <summary>EAN-8 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.EAN_13">
            <summary>EAN-13 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.CODE_128">
            <summary>Code 128 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.CODE_39">
            <summary>Code 39 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.ITF">
            <summary>ITF (Interleaved Two of Five) 1D format. </summary>
        </member>
        <member name="F:com.google.zxing.BarcodeFormat.PDF417">
            <summary>PDF417 format. </summary>
        </member>
        <member name="P:WeiSha.Common.Method.Domain.CurrtentDomain">
            <summary>
            当前站点的域名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Method.Domain.TwoDomain">
            <summary>
            当前站点的二级域名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Method.Domain.MainName">
            <summary>
            当前站点的主域（来自web.config设置）
            </summary>
        </member>
        <member name="T:WeiSha.Common.Activationcode">
            <summary>
            激活码管理
            </summary>
            <![CDATA[通过激活码申请注册]]>
        </member>
        <member name="M:WeiSha.Common.Activationcode.RegistCode(System.Int32,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="type">加密类型，1为cup串号，2为硬盘串号，3为IP+端口，4为域名+端口</param>
            <param name="value">需加密的字符串</param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Activationcode.CodeForCPU">
            <summary>
            通过CPU串号生成激活码
            </summary>
        </member>
        <member name="P:WeiSha.Common.Activationcode.CodeForHardDisk">
            <summary>
            通过硬盘串号生成激活码
            </summary>
        </member>
        <member name="P:WeiSha.Common.Activationcode.CodeForIP">
            <summary>
            通过IP生成激活码
            </summary>
        </member>
        <member name="P:WeiSha.Common.Activationcode.CodeForDomain">
            <summary>
            通过域名生成激活码
            </summary>
        </member>
        <member name="P:WeiSha.Common.Activationcode.CodeForRoot">
            <summary>
            通过主域名生成激活码
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.QRCodeWriter">
            <summary> This object renders a QR Code as a ByteMatrix 2D array of greyscale values.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.QRCodeWriter.encode(System.String,com.google.zxing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary>
            生成二维码图像矩阵，默认是高容错
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:com.google.zxing.qrcode.QRCodeWriter.encode(System.String,com.google.zxing.BarcodeFormat,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary>
            生成二维码图像矩阵，可以选择容错级别
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="corrLevel">容错级别</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.qrcode.QRCodeReader">
            <summary> This implementation can detect and decode QR Codes in an image.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.QRCodeReader.decode(com.google.zxing.BinaryBitmap)">
            <summary> Locates and decodes a QR code in an image.
            
            </summary>
            <returns> a String representing the content encoded by the QR code
            </returns>
            <throws>  ReaderException if a QR code cannot be found, or cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.QRCodeReader.extractPureBits(com.google.zxing.common.BitMatrix)">
            <summary> This method detects a barcode in a "pure" image -- that is, pure monochrome image
            which contains only an unrotated, unskewed, image of a barcode, with some white border
            around it. This is a specialized method that works exceptionally fast in this special
            case.
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.detector.FinderPatternInfo">
            <summary> <p>Encapsulates information about finder patterns in an image, including the location of
            the three finder patterns, and their estimated module size.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataBlock">
            <summary> <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into
            multiple blocks, each of which is a unit of data and error-correction codewords. Each
            is represented by an instance of this class.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.DataBlock.getDataBlocks(System.SByte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)">
            <summary> <p>When QR Codes use multiple data blocks, they are actually interleaved.
            That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This
            method will separate the data into original blocks.</p>
            
            </summary>
            <param name="rawCodewords">bytes as read directly from the QR Code
            </param>
            <param name="version">version of the QR Code
            </param>
            <param name="ecLevel">error-correction level of the QR Code
            </param>
            <returns> {@link DataBlock}s containing original bytes, "de-interleaved" from representation in the
            QR Code
            </returns>
        </member>
        <!-- 对于成员“T:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:com.google.zxing.qrcode.detector.FinderPatternFinder”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.#ctor(com.google.zxing.common.BitMatrix)">
            <summary> <p>Creates a finder that will search the image for three finder patterns.</p>
            
            </summary>
            <param name="image">image to search
            </param>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.centerFromEnd(System.Int32[],System.Int32)">
            <summary> Given a count of black/white/black/white/black pixels just seen and an end position,
            figures the location of the center of this run.
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.foundPatternCross(System.Int32[])">
            <param name="stateCount">count of black/white/black/white/black pixels just read
            </param>
            <returns> true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios
            used by finder patterns to be considered a match
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.crossCheckVertical(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>After a horizontal scan finds a potential finder pattern, this method
            "cross-checks" by scanning down vertically through the center of the possible
            finder pattern to see if the same proportion is detected.</p>
            
            </summary>
            <param name="startI">row where a finder pattern was detected
            </param>
            <param name="centerJ">center of the section that appears to cross a finder pattern
            </param>
            <param name="maxCount">maximum reasonable number of modules that should be
            observed in any reading state, based on the results of the horizontal scan
            </param>
            <returns> vertical center of finder pattern, or {@link Float#NaN} if not found
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.crossCheckHorizontal(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,
            except it reads horizontally instead of vertically. This is used to cross-cross
            check a vertical cross check and locate the real center of the alignment pattern.</p>
            </summary>
        </member>
        <!-- 对于成员“M:com.google.zxing.qrcode.detector.FinderPatternFinder.handlePossibleCenter(System.Int32[],System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.findRowSkip">
            <returns> number of rows we could safely skip during scanning, based on the first
            two finder patterns that have been located. In some cases their position will
            allow us to infer that the third pattern must lie below a certain point farther
            down in the image.
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.haveMultiplyConfirmedCenters">
            <returns> true iff we have found at least 3 finder patterns that have been detected
            at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the
            candidates is "pretty similar"
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPatternFinder.selectBestPatterns">
            <returns> the 3 best {@link FinderPattern}s from our list of candidates. The "best" are
            those that have been detected at least {@link #CENTER_QUORUM} times, and whose module
            size differs from the average among those patterns the least
            </returns>
            <throws>  ReaderException if 3 such finder patterns do not exist </throws>
        </member>
        <member name="T:com.google.zxing.qrcode.detector.FinderPatternFinder.CenterComparator">
            <summary> <p>Orders by {@link FinderPattern#getCount()}, descending.</p></summary>
        </member>
        <member name="F:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder.DIFF_MODSIZE_CUTOFF_PERCENT">
            <summary> More or less arbitrary cutoff point for determining if two finder patterns might belong
            to the same code if they differ less than DIFF_MODSIZE_CUTOFF_PERCENT percent in their
            estimated modules sizes.
            </summary>
        </member>
        <member name="F:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder.DIFF_MODSIZE_CUTOFF">
            <summary> More or less arbitrary cutoff point for determining if two finder patterns might belong
            to the same code if they differ less than DIFF_MODSIZE_CUTOFF pixels/module in their
            estimated modules sizes.
            </summary>
        </member>
        <member name="M:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder.#ctor(com.google.zxing.common.BitMatrix)">
            <summary> <p>Creates a finder that will search the image for three finder patterns.</p>
            
            </summary>
            <param name="image">image to search
            </param>
        </member>
        <member name="M:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder.selectBestPatterns">
            <returns> the 3 best {@link FinderPattern}s from our list of candidates. The "best" are
            those that have been detected at least {@link #CENTER_QUORUM} times, and whose module
            size differs from the average among those patterns the least
            </returns>
            <throws>  ReaderException if 3 such finder patterns do not exist </throws>
        </member>
        <member name="T:com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder.ModuleSizeComparator">
            <summary> A comparator that orders FinderPatterns by their estimated module size.</summary>
        </member>
        <member name="T:com.google.zxing.common.CharacterSetECI">
            <summary> Encapsulates a Character Set ECI, according to "Extended Channel Interpretations" 5.3.1.1
            of ISO 18004.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.ECI">
            <summary> Superclass of classes encapsulating types ECIs, according to "Extended Channel Interpretations"
            5.3 of ISO 18004.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.ECI.getECIByValue(System.Int32)">
            <param name="value">ECI value
            </param>
            <returns> {@link ECI} representing ECI of given value, or null if it is legal but unsupported
            </returns>
            <throws>  IllegalArgumentException if ECI value is invalid </throws>
        </member>
        <member name="M:com.google.zxing.common.CharacterSetECI.getCharacterSetECIByValue(System.Int32)">
            <param name="value">character set ECI value
            </param>
            <returns> {@link CharacterSetECI} representing ECI of given value, or null if it is legal but
            unsupported
            </returns>
            <throws>  IllegalArgumentException if ECI value is invalid </throws>
        </member>
        <member name="M:com.google.zxing.common.CharacterSetECI.getCharacterSetECIByName(System.String)">
            <param name="name">character set ECI encoding name
            </param>
            <returns> {@link CharacterSetECI} representing ECI for character encoding, or null if it is legal
            but unsupported
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.URIResultParser">
            <summary> Tries to parse results that are a URI of some kind.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.client.result.URIResultParser.isBasicallyValidURI(System.String)">
            <summary> Determines whether a string is not obviously not a URI. This implements crude checks; this class does not
            intend to strictly check URIs as its only function is to represent what is in a barcode, but, it does
            need to know when a string is obviously not a URI.
            </summary>
        </member>
        <member name="T:com.google.zxing.client.result.AddressBookParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="P:com.google.zxing.client.result.AddressBookParsedResult.Pronunciation">
            <summary> In Japanese, the name is written in kanji, which can have multiple readings. Therefore a hint
            is often provided, called furigana, which spells the name phonetically.
            
            </summary>
            <returns> The pronunciation of the getNames() field, often in hiragana or katakana.
            </returns>
        </member>
        <member name="P:com.google.zxing.client.result.AddressBookParsedResult.Birthday">
            <returns> birthday formatted as yyyyMMdd (e.g. 19780917)
            </returns>
        </member>
        <member name="T:WeiSha.Common.Server">
            <summary>
            服务器信息
            </summary>
        </member>
        <member name="M:WeiSha.Common.Server.MapPath(System.String)">
            <summary>
            获取某路径的物理路径，路径末尾带有\符号
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Server.VirtualPath(System.String)">
            <summary>
            获取某路径相对网站根目录的虚拟路径，路径末尾带有/符号
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Server.LegalName(System.String)">
            <summary>
            将文件名转换为合法的文件名
            </summary>
            <param name="filename">文件名</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Server.Rewriter(System.String)">
            <summary>
            页面重定向
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:WeiSha.Common.Server.getTime">
            <summary>
            JavaScript时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。
            </summary>
        </member>
        <member name="M:WeiSha.Common.Server.getTime(System.DateTime)">
            <summary>
             JavaScript时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Server.IP">
            <summary>
            服务器IP
            </summary>       
        </member>
        <member name="P:WeiSha.Common.Server.IsLocalIP">
            <summary>
            是否是本机IP
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.IsIntranetIP">
            <summary>
            是否是内网IP
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.Port">
            <summary>
            服务器访问端口
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.Domain">
            <summary>
            站点的访问域名
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Server.DomainPath">
            <summary>
            站点的访问域名带端口，如:http://www.xx.com/
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Server.RootDomain">
            <summary>
            根域名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.MainName">
            <summary>
            当前站点的主域（来自db.config设置）
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.OS">
            <summary>
            服务器操作系统
            </summary>  
        </member>
        <member name="P:WeiSha.Common.Server.IISVersion">
            <summary>
            IIS版本
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.CPUCount">
            <summary>
            CPU个数
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.CPUHz">
            <summary>
            CPU主频，单位 GHz
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.RamSize">
            <summary>
            物理内存大小
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.DotNetVersion">
            <summary>
            .Net FramwWork版本号
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.CPU_ID">
            <summary>
            获取CPU的序列号，由于某些原因，可能获取不到
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.HardDiskID">
            <summary>
            取第一块硬盘物理串号；可能会由于某些原因取不到物理串号，会自动返回   
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.ProgramPath">
            <summary>
            当前应用程序的物理路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.DatabaseFilePath">
            <summary>
            数据库的完整物理路径名，包括路径与文件名；如果是Access数据库，则返回路径，如果是其它数据库则不返回
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.DatabasePath">
            <summary>
            数据库所在的物理路径，不包括文件名；如果是Access数据库，则返回路径，如果是其它数据库则不返回
            </summary>
        </member>
        <member name="P:WeiSha.Common.Server.InitDate">
            <summary>
            系统部署运行的初始时间
            </summary>
        </member>
        <member name="T:WeiSha.Common.Param.Method.PageInfo">
            <summary>
            获取当前页面的信息
            </summary>
        </member>
        <member name="M:WeiSha.Common.Param.Method.PageInfo.AddPara(System.String,System.String)">
            <summary>
            增加Get参数
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.PageInfo.AddPara(System.String,System.String[])">
            <summary>
            增加某地址的参数
            </summary>
            <param name="url">地址</param>
            <param name="para">参数，采用key=value的形式</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.PageInfo.AddPara(System.String[])">
            <summary>
            给当前页面添加参数
            </summary>
            <param name="para">参数，采用key=value的形式</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.PageInfo.RemovePara(System.String,System.String[])">
            <summary>
            移除url中的某些参数
            </summary>
            <param name="url"></param>
            <param name="para">参数，采用key=value的形式</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.PageInfo.RemovePara(System.String[])">
            <summary>
            移除当前页面地址的某些参数
            </summary>
            <param name="para">参数，采用key=value的形式</param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.FileName">
            <summary>
            当前aspx文档的文件名，包括后缀名，不包括路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.Name">
            <summary>
            当前Aspx文档的名称，不包括后缀名，例如:test.aspx页面，将返回test
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.FullNamePhysics">
            <summary>
            全名称物理路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.PurviewLabel">
            <summary>
            当前页面的权限标题，例如：Article_Edit.aspx，将返回Article;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.ManageFileName">
            <summary>
            当前页面相对于于/Manage文件夹的文件名，如sys/emplayee.aspx
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.Extension">
            <summary>
            当前页面的后缀名，如aspx；
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.Module">
            <summary>
            当前页面所在的功能模块名称；即相对于/Manage文件夹的路径，因为每一个模块在Manage目录下是一个单独目录
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.AbsolutePath">
            <summary>
            当前aspx文档的URI完整路径，不包括文件名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.PhysicsPath">
            <summary>
            当前页面的物理路径，不包括文件名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.PageInfo.Authority">
            <summary>
            根域，例如http://xxx:82/
            </summary>
        </member>
        <member name="T:WeiSha.Common.Param.Method.ConvertToAnyValue">
            <summary>
            将某个值转换为任意数据类型
            </summary>
        </member>
        <member name="M:WeiSha.Common.Param.Method.ConvertToAnyValue.Split(System.Char)">
            <summary>
            将字符串分拆成数组
            </summary>
            <param name="split">用于分拆的字符</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.ConvertToAnyValue.ChangeType(System.Type)">
            <summary>
            转为指定的数据库类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.ConvertToAnyValue.Decrypt">
            <summary>
            解密字符串,默认密钥为当前域名
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.ParaValue">
            <summary>
            参数的原始值
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.ParaKey">
            <summary>
            参数的键名
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Unit">
            <summary>
            参数的单位
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Int16">
            <summary>
            参数的Int16类型值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Int32">
            <summary>
            参数的Int32类型值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Int64">
            <summary>
            参数的Int64类型值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Double">
            <summary>
            参数的Double类型值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.String">
            <summary>
            参数的String类型值，如果参数不存在或异常，则返回空字符串，非Null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Text">
            <summary>
            参数文本类型值，自动去除html标签
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Value">
            <summary>
            参数的值,如果没有内容，返回Null
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.Boolean">
            <summary>
            参数的Boolean类型值，如果参数不存在或异常，则返回true;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.DateTime">
            <summary>
            参数的DateTime类型值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.MD5">
            <summary>
            参数的MD5加密值(小写)，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.SHA1">
            <summary>
            参数的SHA1加密值，如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.UrlDecode">
            <summary>
            参数的字符串进行 URL 解码并返回已解码的字符串。如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.HtmlDecode">
            <summary>
            对经过HTML 编码的参数进行解码，并返回已解码的字符串。如果参数不存在或异常，则返回null;
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.MapPath">
            <summary>
            转换为物理路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.VirtualPath">
            <summary>
            转换虚拟路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.JavascriptTime">
            <summary>
            将C#时间转换成Javascript的时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.ConvertToAnyValue.TimeStamp">
            <summary>
            JavaScript时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。
            </summary>
        </member>
        <member name="T:WeiSha.Common.Parameters.Authorization.VersionLimit">
            <summary>
            版本的限制项
            </summary>
        </member>
        <member name="F:WeiSha.Common.Parameters.Authorization.VersionLimit.Domain">
            <summary>
            限定的根域名
            </summary>
        </member>
        <member name="M:WeiSha.Common.Parameters.Authorization.VersionLimit.GetLimitNumber(System.String)">
            <summary>
            通过字段获取限制数量
            </summary>
            <param name="field"></param>
            <returns>返回值为-1，则不限制数量</returns>
        </member>
        <member name="M:WeiSha.Common.Parameters.Authorization.VersionLimit.DataItems(WeiSha.Common.Parameters.Authorization.VersionLimit)">
            <summary>
            当前版本各限制项的数据集
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Accounts">
            <summary>
            学员
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Teacher">
            <summary>
            教师
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Subject">
            <summary>
            专业
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Course">
            <summary>
            课程，或科目
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Questions">
            <summary>
            试题
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.TestPaper">
            <summary>
            试卷
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Article">
            <summary>
            文章，或资讯
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Knowledge">
            <summary>
            知识
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Notice">
            <summary>
            公告
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLimit.Organization">
            <summary>
            机构
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForPrompt">
            <summary>
            作为提示项的异常
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForAlert">
            <summary>
            作为警告项的异常
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForWarning">
            <summary>
            作为严重错误的异常
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForLicense">
            <summary>
            如果没有获得授权
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForNoLogin">
            <summary>
            如果没有登录
            </summary>
        </member>
        <member name="T:WeiSha.Common.ExceptionForNoPurview">
            <summary>
            没有操作权限
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.encoder.MaskUtil">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask">
            <summary> <p>Encapsulates data masks for the data bits in a QR code, per ISO 18004:2006 6.8. Implementations
            of this class can un-mask a raw BitMatrix. For simplicity, they will unmask the entire BitMatrix,
            including areas used for finder patterns, timing patterns, etc. These areas should be unused
            after the point they are unmasked anyway.</p>
            
            <p>Note that the diagram in section 6.8.1 is misleading since it indicates that i is column position
            and j is row position. In fact, as the text says, i is row position and j is column position.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.DataMask.DATA_MASKS">
            <summary> See ISO 18004:2006 6.8.1</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.DataMask.unmaskBitMatrix(com.google.zxing.common.BitMatrix,System.Int32)">
            <summary> <p>Implementations of this method reverse the data masking process applied to a QR Code and
            make its bits ready to read.</p>
            
            </summary>
            <param name="bits">representation of QR Code bits
            </param>
            <param name="dimension">dimension of QR Code, represented by bits, being unmasked
            </param>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.DataMask.forReference(System.Int32)">
            <param name="reference">a value between 0 and 7 indicating one of the eight possible
            data mask patterns a QR Code may use
            </param>
            <returns> {@link DataMask} encapsulating the data mask pattern
            </returns>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask000">
            <summary> 000: mask bits for which (x + y) mod 2 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask001">
            <summary> 001: mask bits for which x mod 2 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask010">
            <summary> 010: mask bits for which y mod 3 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask011">
            <summary> 011: mask bits for which (x + y) mod 3 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask100">
            <summary> 100: mask bits for which (x/2 + y/3) mod 2 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask101">
            <summary> 101: mask bits for which xy mod 2 + xy mod 3 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask110">
            <summary> 110: mask bits for which (xy mod 2 + xy mod 3) mod 2 == 0</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.DataMask.DataMask111">
            <summary> 111: mask bits for which ((x+y)mod 2 + xy mod 3) mod 2 == 0</summary>
        </member>
        <member name="T:com.google.zxing.oned.EAN8Writer">
            <summary> This object renders an EAN8 code as a ByteMatrix 2D array of greyscale
            values.
            
            </summary>
            <author>  aripollak@gmail.com (Ari Pollak)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.oned.EAN8Writer.encode(System.String)">
            <returns> a byte array of horizontal pixels (0 = white, 1 = black) 
            </returns>
        </member>
        <member name="T:com.google.zxing.oned.EAN8Reader">
            <summary> <p>Implements decoding of the EAN-8 format.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser">
            <summary> <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes
            in one Data Matrix Code. This class decodes the bits back into text.</p>
            
            <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>
            
            </summary>
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.C40_BASIC_SET_CHARS">
            <summary> See ISO 16022:2006, Annex C Table C.1
            The C40 Basic Character Set (*'s used for placeholders for the shift values)
            </summary>
        </member>
        <member name="F:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.TEXT_BASIC_SET_CHARS">
            <summary> See ISO 16022:2006, Annex C Table C.2
            The Text Basic Character Set (*'s used for placeholders for the shift values)
            </summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeAsciiSegment(com.google.zxing.common.BitSource,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary> See ISO 16022:2006, 5.2.3 and Annex C, Table C.2</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeC40Segment(com.google.zxing.common.BitSource,System.Text.StringBuilder)">
            <summary> See ISO 16022:2006, 5.2.5 and Annex C, Table C.1</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeTextSegment(com.google.zxing.common.BitSource,System.Text.StringBuilder)">
            <summary> See ISO 16022:2006, 5.2.6 and Annex C, Table C.2</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeAnsiX12Segment(com.google.zxing.common.BitSource,System.Text.StringBuilder)">
            <summary> See ISO 16022:2006, 5.2.7</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeEdifactSegment(com.google.zxing.common.BitSource,System.Text.StringBuilder)">
            <summary> See ISO 16022:2006, 5.2.8 and Annex C Table C.3</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.decodeBase256Segment(com.google.zxing.common.BitSource,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary> See ISO 16022:2006, 5.2.9 and Annex B, B.2</summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.DecodedBitStreamParser.unrandomize255State(System.Int32,System.Int32)">
            <summary> See ISO 16022:2006, Annex B, B.2</summary>
        </member>
        <member name="T:com.google.zxing.datamatrix.DataMatrixReader">
            <summary> This implementation can detect and decode Data Matrix codes in an image.
            
            </summary>
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.datamatrix.DataMatrixReader.decode(com.google.zxing.BinaryBitmap)">
            <summary> Locates and decodes a Data Matrix code in an image.
            
            </summary>
            <returns> a String representing the content encoded by the Data Matrix code
            </returns>
            <throws>  ReaderException if a Data Matrix code cannot be found, or cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.DataMatrixReader.extractPureBits(com.google.zxing.common.BitMatrix)">
            <summary> This method detects a Data Matrix code in a "pure" image -- that is, pure monochrome image
            which contains only an unrotated, unskewed, image of a Data Matrix code, with some white border
            around it. This is a specialized method that works exceptionally fast in this special
            case.
            </summary>
        </member>
        <member name="T:com.google.zxing.client.result.SMSMMSResultParser">
            <summary> <p>Parses an "sms:" URI result, which specifies a number to SMS and optional
            "via" number. See <a href="http://gbiv.com/protocols/uri/drafts/draft-antti-gsm-sms-url-04.txt">
            the IETF draft</a> on this.</p>
            
            <p>This actually also parses URIs starting with "mms:", "smsto:", "mmsto:", "SMSTO:", and
            "MMSTO:", and treats them all the same way, and effectively converts them to an "sms:" URI
            for purposes of forwarding to the platform.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.ProductParsedResult">
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.XmlDocumentHelper">
            <summary>
            XML文档操作的扩展
            </summary>
        </member>
        <!-- 对于成员“M:WeiSha.Common.XmlDocumentHelper.LoadXml(System.Xml.XmlDocument,System.String,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="T:WeiSha.Common.VideoHandler">
            <summary>
            视频操作方法，此为入口类
            </summary>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.Hanlder(System.String)">
            <summary>
            通过视频文件名创建视频操作对象
            </summary>
            <param name="videoFile"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoHandler._init">
            <summary>
            初始化各种值
            </summary>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.getVideoInfo(System.String)">
            <summary>
            获取视频文件的各项信息，返回xml对象
            </summary>
            <param name="videoFile"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.durationForTimeSpan(System.String)">
            <summary>
            将字符型的 h:m:s.f 数据转换为 TimeSpan
            </summary>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.getPath(System.String,System.String@)">
            <summary>
            返回转换视频的应用路径
            </summary>
            <param name="filename">工具的文件名</param>
            <param name="fullpath">完整路径名</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.Convert">
            <summary>
            视频转换的操作对象(程序会通过视频文件的后缀名判断返回操作对)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.Convert(System.String)">
            <summary>
            视频转换的操作对象
            </summary>
            <param name="funcname">直接指定方法名,ffmpeg、mencoder</param>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.ExecuteCmd(System.String,System.String)">
            <summary>
            执行命令行指令
            </summary>
            <param name="exePath">要执行的程序文件（完整路径名）</param>
            <param name="parameters">执行命令的参数</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.Delete">
            <summary>
            删除视频文件
            </summary>
        </member>
        <member name="M:WeiSha.Common.VideoHandler.Delete(System.String)">
            <summary>
            删除视频文件
            </summary>
            <param name="outexist">要排除的扩展名</param>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.VideoFile">
            <summary>
            被操作的视频文件
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Width">
            <summary>
            视频宽度
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Height">
            <summary>
            视频高度
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Duration">
            <summary>
            视频时长
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Size">
            <summary>
            视频文件的大小，单位：字节
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.SizeFormate">
            <summary>
            视频文件的大小，以字符形式
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Format">
            <summary>
            视频格式（简短名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.FormatFull">
            <summary>
            视频格式（完整名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.VideoCode">
            <summary>
            视频编码（简短名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.BitRate">
            <summary>
            视频编码（简短名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.VideoCodeFull">
            <summary>
            视频编码（完整名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.AudioCode">
            <summary>
            音频编码（简短名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.AudioCodeFull">
            <summary>
            音频编码（完整名称）
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.Name">
            <summary>
            视频文件名称，不带路径与扩展名
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.FileExtension">
            <summary>
            视频频文件的扩展名，不带点
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.FileName">
            <summary>
            视频频文件名称，不带路径名
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.FileFullName">
            <summary>
            视频频文件名称，带完整路径名
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.FilePath">
            <summary>
            视频频文件的路径名称，不包括文件
            </summary>
        </member>
        <member name="P:WeiSha.Common.VideoHandler.XMLInfo">
            <summary>
            视频信息的完整XML对象
            </summary>
        </member>
        <member name="T:com.google.zxing.WriterException">
            <summary> A base class which covers the range of exceptions which may occur when encoding a barcode using
            the Writer framework.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.pdf417.decoder.DecodedBitStreamParser">
            <summary> <p>This class contains the methods for decoding the PDF417 codewords.</p>
            
            </summary>
            <author>  SITA Lab (kevin.osullivan@sita.aero)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.textCompaction(System.Int32[],System.Int32,System.Text.StringBuilder)">
            <summary> Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be
            encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as
            well as selected control characters.
            
            </summary>
            <param name="codewords">The array of codewords (data + error)
            </param>
            <param name="codeIndex">The current index into the codeword array.
            </param>
            <param name="result">   The decoded data is appended to the result.
            </param>
            <returns> The next index into the codeword array.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.decodeTextCompaction(System.Int32[],System.Int32[],System.Int32,System.Text.StringBuilder)">
            <summary> The Text Compaction mode includes all the printable ASCII characters
            (i.e. values from 32 to 126) and three ASCII control characters: HT or tab
            (ASCII value 9), LF or line feed (ASCII value 10), and CR or carriage
            return (ASCII value 13). The Text Compaction mode also includes various latch
            and shift characters which are used exclusively within the mode. The Text
            Compaction mode encodes up to 2 characters per codeword. The compaction rules
            for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode
            switches are defined in 5.4.2.3.
            
            </summary>
            <param name="textCompactionData">The text compaction data.
            </param>
            <param name="byteCompactionData">The byte compaction data if there
            was a mode shift.
            </param>
            <param name="length">            The size of the text compaction and byte compaction data.
            </param>
            <param name="result">            The decoded data is appended to the result.
            </param>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.byteCompaction(System.Int32,System.Int32[],System.Int32,System.Text.StringBuilder)">
            <summary> Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.
            This includes all ASCII characters value 0 to 127 inclusive and provides for international
            character set support.
            
            </summary>
            <param name="mode">     The byte compaction mode i.e. 901 or 924
            </param>
            <param name="codewords">The array of codewords (data + error)
            </param>
            <param name="codeIndex">The current index into the codeword array.
            </param>
            <param name="result">   The decoded data is appended to the result.
            </param>
            <returns> The next index into the codeword array.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.numericCompaction(System.Int32[],System.Int32,System.Text.StringBuilder)">
            <summary> Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.
            
            </summary>
            <param name="codewords">The array of codewords (data + error)
            </param>
            <param name="codeIndex">The current index into the codeword array.
            </param>
            <param name="result">   The decoded data is appended to the result.
            </param>
            <returns> The next index into the codeword array.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.decodeBase900toBase10(System.Int32[],System.Int32)">
            <summary> Convert a list of Numeric Compacted codewords from Base 900 to Base 10.
            
            </summary>
            <param name="codewords">The array of codewords
            </param>
            <param name="count">    The number of codewords
            </param>
            <returns> The decoded string representing the Numeric data.
            </returns>
        </member>
        <!-- 对于成员“M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.multiply(System.String,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.pdf417.decoder.DecodedBitStreamParser.add(System.String,System.String)">
            <summary> Add two numbers which are represented as strings.
            
            </summary>
            <param name="value1">
            </param>
            <param name="value2">
            </param>
            <returns> the result of value1 + value2
            </returns>
        </member>
        <member name="T:com.google.zxing.oned.Code39Writer">
             <summary> <p>Implements decoding of the EAN-13 format.</p>
            
             </summary>
             <author>  erik.barbara@gmail.com (Erik Barbara)
             </author>
             <author>  em@nerd.ocracy.org (Emanuele Aina) - Ported from ZXING Java Source
             </author>
        </member>
        <member name="T:com.google.zxing.oned.Code39Reader">
            <summary> <p>Decodes Code 39 barcodes. This does not support "Full ASCII Code 39" yet.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.oned.Code39Reader.CHARACTER_ENCODINGS">
            <summary> These represent the encodings of characters, as patterns of wide and narrow bars.
            The 9 least-significant bits of each int correspond to the pattern of wide and narrow,
            with 1s representing "wide" and 0s representing narrow.
            </summary>
        </member>
        <member name="M:com.google.zxing.oned.Code39Reader.#ctor">
            <summary> Creates a reader that assumes all encoded data is data, and does not treat the final
            character as a check digit. It will not decoded "extended Code 39" sequences.
            </summary>
        </member>
        <member name="M:com.google.zxing.oned.Code39Reader.#ctor(System.Boolean)">
            <summary> Creates a reader that can be configured to check the last character as a check digit.
            It will not decoded "extended Code 39" sequences.
            
            </summary>
            <param name="usingCheckDigit">if true, treat the last data character as a check digit, not
            data, and verify that the checksum passes.
            </param>
        </member>
        <member name="M:com.google.zxing.oned.Code39Reader.#ctor(System.Boolean,System.Boolean)">
            <summary> Creates a reader that can be configured to check the last character as a check digit,
            or optionally attempt to decode "extended Code 39" sequences that are used to encode
            the full ASCII character set.
            
            </summary>
            <param name="usingCheckDigit">if true, treat the last data character as a check digit, not
            data, and verify that the checksum passes.
            </param>
            <param name="extendedMode">if true, will attempt to decode extended Code 39 sequences in the
            text.
            </param>
        </member>
        <member name="T:com.google.zxing.multi.qrcode.QRCodeMultiReader">
            <summary> This implementation can detect and decode multiple QR Codes in an image.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  Hannes Erven
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.multi.ByQuadrantReader">
            <summary> This class attempts to decode a barcode from an image, not by scanning the whole image,
            but by scanning subsets of the image. This is important when there may be multiple barcodes in
            an image, and detecting a barcode may find parts of multiple barcode and fail to decode
            (e.g. QR Codes). Instead this scans the four quadrants of the image -- and also the center
            'quadrant' to cover the case where a barcode is found in the center.
            
            </summary>
            <seealso cref="T:com.google.zxing.multi.GenericMultipleBarcodeReader">
            </seealso>
        </member>
        <member name="T:com.google.zxing.client.result.GeoResultParser">
            <summary> Parses a "geo:" URI result, which specifies a location on the surface of
            the Earth as well as an optional altitude above the surface. See
            <a href="http://tools.ietf.org/html/draft-mayrhofer-geo-uri-00">
            http://tools.ietf.org/html/draft-mayrhofer-geo-uri-00</a>.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.WebConfigItem">
            <summary>
            自定义webconfig节点的item项
            </summary>
        </member>
        <member name="T:WeiSha.Common.Login">
            <summary>
            系统参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.Login.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="T:WeiSha.Common.IBusinessInterface">
            <summary>
            空接口，所有业务层的接口需继承该接口。
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.BitMatrixParser">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.BitMatrixParser.#ctor(com.google.zxing.common.BitMatrix)">
            <param name="bitMatrix">{@link BitMatrix} to parse
            </param>
            <throws>  ReaderException if dimension is not >= 21 and 1 mod 4 </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.BitMatrixParser.readFormatInformation">
            <summary> <p>Reads format information from one of its two locations within the QR Code.</p>
            
            </summary>
            <returns> {@link FormatInformation} encapsulating the QR Code's format info
            </returns>
            <throws>  ReaderException if both format information locations cannot be parsed as </throws>
            <summary> the valid encoding of format information
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.BitMatrixParser.readVersion">
            <summary> <p>Reads version information from one of its two locations within the QR Code.</p>
            
            </summary>
            <returns> {@link Version} encapsulating the QR Code's version
            </returns>
            <throws>  ReaderException if both version information locations cannot be parsed as </throws>
            <summary> the valid encoding of version information
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.BitMatrixParser.readCodewords">
            <summary> <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the
            correct order in order to reconstitute the codewords bytes contained within the
            QR Code.</p>
            
            </summary>
            <returns> bytes encoded within the QR Code
            </returns>
            <throws>  ReaderException if the exact number of bytes expected is not read </throws>
        </member>
        <member name="T:com.google.zxing.multi.qrcode.detector.MultiDetector">
            <summary> <p>Encapsulates logic that can detect one or more QR Codes in an image, even if the QR Code
            is rotated or skewed, or partially obscured.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  Hannes Erven
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.BitMatrixParser">
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- 对于成员“M:com.google.zxing.datamatrix.decoder.BitMatrixParser.#ctor(com.google.zxing.common.BitMatrix)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readVersion(com.google.zxing.common.BitMatrix)">
            <summary> <p>Creates the version object based on the dimension of the original bit matrix from 
            the datamatrix code.</p>
            
            <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p>
            
            </summary>
            <param name="bitMatrix">Original {@link BitMatrix} including alignment patterns
            </param>
            <returns> {@link Version} encapsulating the Data Matrix Code's "version"
            </returns>
            <throws>  ReaderException if the dimensions of the mapping matrix are not valid </throws>
            <summary> Data Matrix dimensions.
            </summary>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readCodewords">
            <summary> <p>Reads the bits in the {@link BitMatrix} representing the mapping matrix (No alignment patterns)
            in the correct order in order to reconstitute the codewords bytes contained within the
            Data Matrix Code.</p>
            
            </summary>
            <returns> bytes encoded within the Data Matrix Code
            </returns>
            <throws>  ReaderException if the exact number of bytes expected is not read </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readModule(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Reads a bit of the mapping matrix accounting for boundary wrapping.</p>
            
            </summary>
            <param name="row">Row to read in the mapping matrix
            </param>
            <param name="column">Column to read in the mapping matrix
            </param>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> value of the given bit in the mapping matrix
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readUtah(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Reads the 8 bits of the standard Utah-shaped pattern.</p>
            
            <p>See ISO 16022:2006, 5.8.1 Figure 6</p>
            
            </summary>
            <param name="row">Current row in the mapping matrix, anchored at the 8th bit (LSB) of the pattern
            </param>
            <param name="column">Current column in the mapping matrix, anchored at the 8th bit (LSB) of the pattern
            </param>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> byte from the utah shape
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readCorner1(System.Int32,System.Int32)">
            <summary> <p>Reads the 8 bits of the special corner condition 1.</p>
            
            <p>See ISO 16022:2006, Figure F.3</p>
            
            </summary>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> byte from the Corner condition 1
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readCorner2(System.Int32,System.Int32)">
            <summary> <p>Reads the 8 bits of the special corner condition 2.</p>
            
            <p>See ISO 16022:2006, Figure F.4</p>
            
            </summary>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> byte from the Corner condition 2
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readCorner3(System.Int32,System.Int32)">
            <summary> <p>Reads the 8 bits of the special corner condition 3.</p>
            
            <p>See ISO 16022:2006, Figure F.5</p>
            
            </summary>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> byte from the Corner condition 3
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.readCorner4(System.Int32,System.Int32)">
            <summary> <p>Reads the 8 bits of the special corner condition 4.</p>
            
            <p>See ISO 16022:2006, Figure F.6</p>
            
            </summary>
            <param name="numRows">Number of rows in the mapping matrix
            </param>
            <param name="numColumns">Number of columns in the mapping matrix
            </param>
            <returns> byte from the Corner condition 4
            </returns>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.BitMatrixParser.extractDataRegion(com.google.zxing.common.BitMatrix)">
            <summary> <p>Extracts the data region from a {@link BitMatrix} that contains
            alignment patterns.</p>
            
            </summary>
            <param name="bitMatrix">Original {@link BitMatrix} with alignment patterns
            </param>
            <returns> BitMatrix that has the alignment patterns removed
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.optional.NDEFSmartPosterParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.EmailAddressParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.Templates.TemplateConfingItem">
            <summary>
            Webconfig中的模板信息的配置子项
            </summary>
        </member>
        <member name="F:WeiSha.Common.Templates.TemplateConfingItem._nodeItem">
            <summary>
            模板库的节点信息
            </summary>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="bankName">模板库名称，如Web、Mobile</param>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.GetPath(System.String)">
            <summary>
            获取某模板路径
            </summary>
            <param name="templateName">模板名称</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.GetAttr(System.String)">
            <summary>
            获取当前配置项的属性
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.SetCurrent(System.String)">
            <summary>
            设置当前使用的模板
            </summary>
            <param name="tag">当前模板的名称</param>
            <returns>模板对象</returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.GetTemplate(System.String)">
            <summary>
            通过标识（文件夹名称）获取模板
            </summary>
            <param name="tag">标识（文件夹名称）</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.GetParameter(System.String)">
            <summary>
            获取当前模样库的参数(即item设置中的子级item参数）
            </summary>
            <param name="key">key值</param>
            <returns>返回参数项的value值</returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem._orderItem(WeiSha.Common.Templates.TemplateBank[])">
            <summary>
            通过模板库的名称进行排序
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Templates.TemplateConfingItem.compare(WeiSha.Common.Templates.TemplateBank,WeiSha.Common.Templates.TemplateBank)">
            <summary>
            比较两个模拟名称的大值（按ascii）
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns>前者为true，后者大为false</returns>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Root">
            <summary>
            所有模板所处的根路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Default">
            <summary>
            默认模板库
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Public">
            <summary>
            公共模板库
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Key">
            <summary>
            配置项的key值
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Value">
            <summary>
            配置项的value
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Tag">
            <summary>
            模板标识，用于网址路径，如m/xx.htm时,mobile模板的tag为m，则最终路径指向手机端
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Current">
            <summary>
            当前使用模板
            </summary>
        </member>
        <member name="P:WeiSha.Common.Templates.TemplateConfingItem.Items">
            <summary>
            当前模板分类下，所有可供选择的模板库
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.oned.UPCAReader">
            <summary> <p>Implements decoding of the UPC-A format.</p>
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.GridSampler">
            <summary> Implementations of this class can, given locations of finder patterns for a QR code in an
            image, sample the right points in the image to reconstruct the QR code, accounting for
            perspective distortion. It is abstracted since it is relatively expensive and should be allowed
            to take advantage of platform-specific optimized implementations, like Sun's Java Advanced
            Imaging library, but which may not be available in other environments such as J2ME, and vice
            versa.
            
            The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}
            with an instance of a class which implements this interface.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.GridSampler.setGridSampler(com.google.zxing.common.GridSampler)">
            <summary> Sets the implementation of {@link GridSampler} used by the library. One global
            instance is stored, which may sound problematic. But, the implementation provided
            ought to be appropriate for the entire platform, and all uses of this library
            in the whole lifetime of the JVM. For instance, an Android activity can swap in
            an implementation that takes advantage of native platform libraries.
            
            </summary>
            <param name="newGridSampler">The platform-specific object to install.
            </param>
        </member>
        <member name="M:com.google.zxing.common.GridSampler.sampleGrid(com.google.zxing.common.BitMatrix,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> <p>Samples an image for a square matrix of bits of the given dimension. This is used to extract
            the black/white modules of a 2D barcode like a QR Code found in an image. Because this barcode
            may be rotated or perspective-distorted, the caller supplies four points in the source image
            that define known points in the barcode, so that the image may be sampled appropriately.</p>
            
            <p>The last eight "from" parameters are four X/Y coordinate pairs of locations of points in
            the image that define some significant points in the image to be sample. For example,
            these may be the location of finder pattern in a QR Code.</p>
            
            <p>The first eight "to" parameters are four X/Y coordinate pairs measured in the destination
            {@link BitMatrix}, from the top left, where the known points in the image given by the "from"
            parameters map to.</p>
            
            <p>These 16 parameters define the transformation needed to sample the image.</p>
            
            </summary>
            <param name="image">image to sample
            </param>
            <param name="dimension">width/height of {@link BitMatrix} to sample from image
            </param>
            <returns> {@link BitMatrix} representing a grid of points sampled from the image within a region
            defined by the "from" parameters
            </returns>
            <throws>  ReaderException if image can't be sampled, for example, if the transformation defined </throws>
            <summary>   by the given points is invalid or results in sampling outside the image boundaries
            </summary>
        </member>
        <member name="M:com.google.zxing.common.GridSampler.checkAndNudgePoints(com.google.zxing.common.BitMatrix,System.Single[])">
            <summary> <p>Checks a set of points that have been transformed to sample points on an image against
            the image's dimensions to see if the point are even within the image.</p>
            
            <p>This method will actually "nudge" the endpoints back onto the image if they are found to be
            barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder
            patterns in an image where the QR Code runs all the way to the image border.</p>
            
            <p>For efficiency, the method will check points from either end of the line until one is found
            to be within the image. Because the set of points are assumed to be linear, this is valid.</p>
            
            </summary>
            <param name="image">image into which the points should map
            </param>
            <param name="points">actual points in x1,y1,...,xn,yn form
            </param>
            <throws>  ReaderException if an endpoint is lies outside the image boundaries </throws>
        </member>
        <member name="P:com.google.zxing.common.GridSampler.Instance">
            <returns> the current implementation of {@link GridSampler}
            </returns>
        </member>
        <member name="T:WeiSha.Common.Upload">
            <summary>
            系统上传功能的各模块上传到服务器端的路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Upload.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.Upload.Root">
            <summary>
            上传到根路径
            </summary>
        </member>
        <member name="T:WeiSha.Common.Platform">
            <summary>
            系统平台的信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Platform.Name">
            <summary>
            平台名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Platform.Version">
            <summary>
            版本号
            </summary>       
        </member>
        <member name="P:WeiSha.Common.Platform.License">
            <summary>
            授权码
            </summary>       
        </member>
        <member name="T:WeiSha.Common.Browser">
            <summary>
            浏览器信息
            </summary>
        </member>
        <member name="M:WeiSha.Common.Browser.IsIPAddress(System.String)">
            <summary>    
            判断是否是IP地址格式 0.0.0.0    
            </summary>    
            <param name="str1">待判断的IP地址</param>    
            <returns>true or false</returns>    
        </member>
        <member name="P:WeiSha.Common.Browser.IsMobile">
            <summary>
            当前浏览器是否是手机浏览器
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IsWeixin">
            <summary>
            当前浏览器是否是微信浏览器
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IsWeixinApp">
            <summary>
            前端浏览器是否是微信小程序
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IsDestopApp">
            <summary>
            前端浏览器是否是桌面应用
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IsAPICloud">
            <summary>
            是否处于Apicloud打包的APP中
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IsIPhone">
            <summary>
            当前浏览器是否来自苹果手机
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.IP">
            <summary>
            客户端IP
            </summary>       
        </member>
        <member name="P:WeiSha.Common.Browser.Type">
            <summary>
            客户端的浏览器类型
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.Name">
            <summary>
            客户端的浏览器的名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.Version">
            <summary>
            客户端的浏览器的版本号
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.OS">
            <summary>
            获取客户端的操作系统名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.MobileOS">
            <summary>
            获取手机操作系统；
            </summary>
        </member>
        <member name="P:WeiSha.Common.Browser.PhoneNumber">
            <summary>
            获取手机号码（如果是手机访问），但是大多数通信商受限，无法获取
            </summary>
        </member>
        <member name="T:WeiSha.Common.Copyright`2">
            <summary>
            系统的版权信息，来自copyright.xml，用于代理商更改产品版权信息
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:WeiSha.Common.Copyright`2.GetCopyright">
            <summary>
            获取版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Copyright`2.ToJson">
            <summary>
            转换为json
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Copyright`2.Items">
            <summary>
            信息集
            </summary>
        </member>
        <member name="P:WeiSha.Common.Copyright`2.Item(`0)">
            <summary>
            如果获取不到，不要报错
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WeiSha.Common.Log">
            <summary>
            用于记录日志
            </summary>
        </member>
        <member name="M:WeiSha.Common.Log.Debug(System.String,System.String)">
            <summary>
            向日志文件写入调试信息
            </summary>
            <param name="className">类名</param>
            <param name="content">要写入的内容</param>
        </member>
        <member name="M:WeiSha.Common.Log.Info(System.String,System.String)">
            <summary>
            向日志文件写入信息
            </summary>
            <param name="className">类名</param>
            <param name="content">要写入的内容</param>
        </member>
        <member name="M:WeiSha.Common.Log.Error(System.String,System.String)">
            <summary>
            向日志文件出错信息
            </summary>
            <param name="className">类名</param>
            <param name="content">要写入的内容</param>
        </member>
        <member name="M:WeiSha.Common.Log.Error(System.String,System.Exception)">
            <summary>
            向日志文件出错信息
            </summary>
            <param name="className">类名</param>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:WeiSha.Common.Log.WriteLog(System.String,System.String,System.String)">
            <summary>
            实际写日志的方法
            </summary>
            <param name="logtype">日志类型</param>
            <param name="className">类名称</param>
            <param name="content">实际内容</param>
        </member>
        <member name="P:WeiSha.Common.Log.LOG_LEVEL">
            <summary>
            日志等级，0.不输出日志；1.只输出错误信息; 2.输出错误和正常信息; 3.输出错误信息、正常信息和调试信息
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.Version">
            <summary> See ISO 18004:2006 Annex D
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.Version.VERSION_DECODE_INFO">
            <summary> See ISO 18004:2006 Annex D.
            Element i represents the raw version bits that specify version i + 7
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Version.getProvisionalVersionForDimension(System.Int32)">
            <summary> <p>Deduces version information purely from QR Code dimensions.</p>
            
            </summary>
            <param name="dimension">dimension in modules
            </param>
            <returns> {@link Version} for a QR Code of that dimension
            </returns>
            <throws>  ReaderException if dimension is not 1 mod 4 </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Version.buildFunctionPattern">
            <summary> See ISO 18004:2006 Annex E</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Version.buildVersions">
            <summary> See ISO 18004:2006 6.5.1 Table 9</summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.Version.ECBlocks">
            <summary> <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.Version.ECB">
            <summary> <p>Encapsualtes the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the QR code version's format.</p>
            </summary>
        </member>
        <member name="T:com.google.zxing.pdf417.detector.Detector">
            <summary> <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the
            PDF417 Code is rotated or skewed, or partially obscured.</p>
            
            </summary>
            <author>  SITA Lab (kevin.osullivan@sita.aero)
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.detect">
            <summary> <p>Detects a PDF417 Code in an image, simply.</p>
            
            </summary>
            <returns> {@link DetectorResult} encapsulating results of detecting a PDF417 Code
            </returns>
            <throws>  ReaderException if no QR Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.detect(System.Collections.Hashtable)">
            <summary> <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>
            
            </summary>
            <param name="hints">optional hints to detector
            </param>
            <returns> {@link DetectorResult} encapsulating results of detecting a PDF417 Code
            </returns>
            <throws>  ReaderException if no PDF417 Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.findVertices(com.google.zxing.common.BitMatrix)">
            <summary> Locate the vertices and the codewords area of a black blob using the Start
            and Stop patterns as locators. Assumes that the barcode begins in the left half
            of the image, and ends in the right half.
            TODO: Fix this assumption, allowing the barcode to be anywhere in the image.
            TODO: Scanning every row is very expensive. We should only do this for TRY_HARDER.
            
            </summary>
            <param name="matrix">the scanned barcode image.
            </param>
            <returns> an array containing the vertices:
            vertices[0] x, y top left barcode
            vertices[1] x, y bottom left barcode
            vertices[2] x, y top right barcode
            vertices[3] x, y bottom right barcode
            vertices[4] x, y top left codeword area
            vertices[5] x, y bottom left codeword area
            vertices[6] x, y top right codeword area
            vertices[7] x, y bottom right codeword area
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.findVertices180(com.google.zxing.common.BitMatrix)">
            <summary> Locate the vertices and the codewords area of a black blob using the Start
            and Stop patterns as locators. This assumes that the image is rotated 180
            degrees and if it locates the start and stop patterns at it will re-map
            the vertices for a 0 degree rotation.
            TODO: Change assumption about barcode location.
            TODO: Scanning every row is very expensive. We should only do this for TRY_HARDER.
            
            </summary>
            <param name="matrix">the scanned barcode image.
            </param>
            <returns> an array containing the vertices:
            vertices[0] x, y top left barcode
            vertices[1] x, y bottom left barcode
            vertices[2] x, y top right barcode
            vertices[3] x, y bottom right barcode
            vertices[4] x, y top left codeword area
            vertices[5] x, y bottom left codeword area
            vertices[6] x, y top right codeword area
            vertices[7] x, y bottom right codeword area
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.correctCodeWordVertices(com.google.zxing.ResultPoint[],System.Boolean)">
            <summary> Because we scan horizontally to detect the start and stop patterns, the vertical component of
            the codeword coordinates will be slightly wrong if there is any skew or rotation in the image.
            This method moves those points back onto the edges of the theoretically perfect bounding
            quadrilateral if needed.
            
            </summary>
            <param name="vertices">The eight vertices located by findVertices().
            </param>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.computeModuleWidth(com.google.zxing.ResultPoint[])">
            <summary> <p>Estimates module size (pixels in a module) based on the Start and End
            finder patterns.</p>
            
            </summary>
            <param name="vertices">an array of vertices:
            vertices[0] x, y top left barcode
            vertices[1] x, y bottom left barcode
            vertices[2] x, y top right barcode
            vertices[3] x, y bottom right barcode
            vertices[4] x, y top left codeword area
            vertices[5] x, y bottom left codeword area
            vertices[6] x, y top right codeword area
            vertices[7] x, y bottom right codeword area
            </param>
            <returns> the module size.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,System.Single)">
            <summary> Computes the dimension (number of modules in a row) of the PDF417 Code
            based on vertices of the codeword area and estimated module size.
            
            </summary>
            <param name="topLeft">    of codeword area
            </param>
            <param name="topRight">   of codeword area
            </param>
            <param name="bottomLeft"> of codeword area
            </param>
            <param name="bottomRight">of codeword are
            </param>
            <param name="moduleWidth">estimated module size
            </param>
            <returns> the number of modules in a row.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.round(System.Single)">
            <summary> Ends up being a bit faster than Math.round(). This merely rounds its
            argument to the nearest int, where x.5 rounds up.
            </summary>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.findGuardPattern(com.google.zxing.common.BitMatrix,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32[])">
            <param name="matrix">row of black/white values to search
            </param>
            <param name="column">x position to start search
            </param>
            <param name="row">y position to start search
            </param>
            <param name="width">the number of pixels to search on this row
            </param>
            <param name="pattern">pattern of counts of number of black and white pixels that are
            being searched for as a pattern
            </param>
            <returns> start/end horizontal offset of guard pattern, as an array of two ints.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.detector.Detector.patternMatchVariance(System.Int32[],System.Int32[],System.Int32)">
            <summary> Determines how closely a set of observed counts of runs of black/white
            values matches a given target pattern. This is reported as the ratio of
            the total variance from the expected pattern proportions across all
            pattern elements, to the length of the pattern.
            
            </summary>
            <param name="counters">observed counters
            </param>
            <param name="pattern">expected pattern
            </param>
            <param name="maxIndividualVariance">The most any counter can differ before we give up
            </param>
            <returns> ratio of total variance between counters and pattern compared to
            total pattern size, where the ratio has been multiplied by 256.
            So, 0 means no variance (perfect match); 256 means the total
            variance between counters and patterns equals the pattern length,
            higher values mean even more variance
            </returns>
        </member>
        <member name="T:com.google.zxing.oned.MultiFormatOneDReader">
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.Collections">
            <summary> <p>This is basically a substitute for <code>java.util.Collections</code>, which is not
            present in MIDP 2.0 / CLDC 1.1.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.Collections.insertionSort(System.Collections.ArrayList,com.google.zxing.common.Comparator)">
            <summary> Sorts its argument (destructively) using insert sort; in the context of this package
            insertion sort is simple and efficient given its relatively small inputs.
            
            </summary>
            <param name="vector">vector to sort
            </param>
            <param name="comparator">comparator to define sort ordering
            </param>
        </member>
        <member name="T:com.google.zxing.client.result.ProductResultParser">
            <summary> Parses strings of digits that represent a UPC code.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.BinaryBitmap">
            <summary> This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects
            accept a BinaryBitmap and attempt to decode it.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- 对于成员“M:com.google.zxing.BinaryBitmap.getBlackRow(System.Int32,com.google.zxing.common.BitArray)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:com.google.zxing.BinaryBitmap.crop(System.Int32,System.Int32,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.BinaryBitmap.rotateCounterClockwise">
            <summary> Returns a new object with rotated image data. Only callable if isRotateSupported() is true.
            
            </summary>
            <returns> A rotated version of this object.
            </returns>
        </member>
        <member name="P:com.google.zxing.BinaryBitmap.Width">
            <returns> The width of the bitmap.
            </returns>
        </member>
        <member name="P:com.google.zxing.BinaryBitmap.Height">
            <returns> The height of the bitmap.
            </returns>
        </member>
        <member name="P:com.google.zxing.BinaryBitmap.BlackMatrix">
            <summary> Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive
            and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
            may not apply sharpening. Therefore, a row from this matrix may not be identical to one
            fetched using getBlackRow(), so don't mix and match between them.
            
            </summary>
            <returns> The 2D array of bits for the image (true means black).
            </returns>
        </member>
        <member name="P:com.google.zxing.BinaryBitmap.CropSupported">
            <returns> Whether this bitmap can be cropped.
            </returns>
        </member>
        <member name="P:com.google.zxing.BinaryBitmap.RotateSupported">
            <returns> Whether this bitmap supports counter-clockwise rotation.
            </returns>
        </member>
        <member name="M:WeiSha.Common.HTML.ClearTag(System.String,System.Int32)">
            <summary>
            去除HTML标签，并返回指定长度
            </summary>
            <param name="html"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.ChangeType(System.Object,System.Type)">
            <summary>
            将值转为指定的数据类型
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.EncryptForDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptStr">需要加密的字符串</param>
            <param name="encryptKey">加密所用的Key</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.DecryptForDES(System.String,System.String)">
            <summary>
            解密DES密码
            </summary>
            <param name="decryptStr">要解密的字符串</param>
            <param name="decryptKey">解密的Key</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.EncryptForRSA(System.String,System.String)">
            <summary>
            加密RSA字符串
            </summary>
            <param name="encryptStr">需要加密的字符串</param>
            <param name="encryptKey">加密所用的Key</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.DecryptForRSA(System.String,System.String)">
            <summary>
            解密RSA密码
            </summary>
            <param name="decryptStr">要解密的字符串</param>
            <param name="decryptKey">解密的Key</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.EncryptForBase64(System.String)">
            <summary>
            加密字符为base64
            </summary>
            <param name="encryptStr"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.EncryptForBase64UrlEncode(System.String)">
            <summary>
            加密字符为base64，并进行url编码
            </summary>
            <param name="encryptStr"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.DataConvert.DecryptForBase64(System.String)">
            <summary>
            解密base64字符
            </summary>
            <param name="decryptStr"></param>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.Mode">
            <summary> <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which
            data can be encoded to bits in the QR code standard.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Mode.forBits(System.Int32)">
            <param name="bits">four bits encoding a QR Code data mode
            </param>
            <returns> {@link Mode} encoded by these bits
            </returns>
            <throws>  IllegalArgumentException if bits do not correspond to a known mode </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.Mode.getCharacterCountBits(com.google.zxing.qrcode.decoder.Version)">
            <param name="version">version in question
            </param>
            <returns> number of bits used, in this QR Code symbol {@link Version}, to encode the
            count of characters that will follow encoded in this {@link Mode}
            </returns>
        </member>
        <member name="T:com.google.zxing.MultiFormatWriter">
            <summary> This is a factory class which finds the appropriate Writer subclass for the BarcodeFormat
            requested and encodes the barcode with the supplied contents.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.MultiFormatReader">
            <summary> MultiFormatReader is a convenience class and the main entry point into the library for most uses.
            By default it attempts to decode all barcode formats that the library supports. Optionally, you
            can provide a hints object to request different behavior, for example only decoding QR codes.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.MultiFormatReader.decode(com.google.zxing.BinaryBitmap)">
            <summary> This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it
            passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.
            Use setHints() followed by decodeWithState() for continuous scan applications.
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="M:com.google.zxing.MultiFormatReader.decode(com.google.zxing.BinaryBitmap,System.Collections.Hashtable)">
            <summary> Decode an image using the hints provided. Does not honor existing state.
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <param name="hints">The hints to use, clearing the previous state.
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="M:com.google.zxing.MultiFormatReader.decodeWithState(com.google.zxing.BinaryBitmap)">
            <summary> Decode an image using the state set up by calling setHints() previously. Continuous scan
            clients will get a <b>large</b> speed increase by using this instead of decode().
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="P:com.google.zxing.MultiFormatReader.Hints">
            <summary> This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls
            to decodeWithState(image) can reuse the same set of readers without reallocating memory. This
            is important for performance in continuous scan clients.
            
            </summary>
            <param name="hints">The set of hints to use for subsequent calls to decode(image)
            </param>
        </member>
        <member name="T:com.google.zxing.client.result.VEventResultParser">
            <summary> Partially implements the iCalendar format's "VEVENT" format for specifying a
            calendar event. See RFC 2445. This supports SUMMARY, DTSTART and DTEND fields.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.SMSParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.PageCache">
            <summary>
            管理页面缓存
            </summary>
        </member>
        <member name="M:WeiSha.Common.PageCache.setVale">
            <summary>
            设置当前对象的值（来自config文件）
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Items">
            <summary>
            缓存项的集合
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Path">
            <summary>
            写入静态化文件到硬盘的所在路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.StaticPath">
            <summary>
            静态文件路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.TimeSpan">
            <summary>
            缓存的时间，单位：分钟
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Write">
            <summary>
            是否写入到硬盘
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Enable">
            <summary>
            是否启用缓存
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Key">
            <summary>
            缓存项的Key值
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Value">
            <summary>
            缓存项的Value值
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Parent">
            <summary>
            当前节点的父节点
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.Item(System.String)">
            <summary>
            通过网址来获取缓存像
            </summary>
            <param name="key">来自Request.Url.PathAndQuery，即网址+参数</param>
            <returns></returns>
        </member>
        <member name="T:WeiSha.Common.PageCache.PageCache_StaticItem">
            <summary>
            缓存项
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.PageCache_StaticItem.Key">
            <summary>
            缓存项的键值
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.PageCache_StaticItem.Value">
            <summary>
            缓存项的value，即参数项
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.PageCache_StaticItem.CreateTime">
            <summary>
            缓存创建时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.PageCache.PageCache_StaticItem.Context">
            <summary>
            缓存项的内容
            </summary>
        </member>
        <member name="T:WeiSha.Common.License">
            <summary>
            授权的许可的验证处理类
            </summary>
        </member>
        <member name="M:WeiSha.Common.License.#ctor(System.Boolean)">
            <summary>
            构建对象
            </summary>
            <param name="isinit">是否初始化</param>
        </member>
        <member name="M:WeiSha.Common.License.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:WeiSha.Common.License._initLocalLicense">
            <summary>
            初始化本地授权信息
            </summary>
            <returns>是否通过授权</returns>
        </member>
        <member name="M:WeiSha.Common.License._initOnlineLicense">
            <summary>
            在线授权认证
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License.activationcode">
            <summary>
            取系统的域名激活码
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License._decrypt(System.String)">
            <summary>
            解析授权码的各项信息，并赋值到相关参数
            </summary>
            <param name="licenseString"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License.DecryptForAscii(System.String)">
            <summary>
            解密Ascii编码; 将Ascii码转为字符串
            </summary>
            <param name="ascii"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License.DecryptForDES(System.String,System.String)">
            <summary>
            解密DES密码
            </summary>
            <param name="decryptStr">要解密的字符串</param>
            <param name="decryptKey">解密的Key</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License.GetDecryptKey(WeiSha.Common.ActivationType)">
            <summary>
            生成解密的Key
            </summary>
            <param name="type">根据激码的类型</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License._SetInitValue(System.String)">
            <summary>
            通过授权信息，设置各项值
            </summary>
            <param name="licenseString">已经解密过的授权信息</param>
            <returns>是否通过授权</returns>
        </member>
        <member name="M:WeiSha.Common.License._readInitTime">
            <summary>
            读取系统的初始运行时间，如果不存在则写入
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.License._DecryptActivCode(System.String)">
            <summary>
            解密激活码的字符串
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.License.FreeTime">
            <summary>
            可以免费使用的时间,单位：小时
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.StartTime">
            <summary>
            授权开始的时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.EndTime">
            <summary>
            授权结束的时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.Serial">
            <summary>
            授权的主题主体信息，如CPU串号
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.Port">
            <summary>
            认证信息中的端口，只有通过IP与域名认证时，才会有此信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.IsApply">
            <summary>
            是否进行了在线申请
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.IsPass">
            <summary>
            是否通过验证
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.IsLicense">
            <summary>
            是否拥有授权
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.LicenseString">
            <summary>
            授权信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.Type">
            <summary>
            激活码类型
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.FullText">
            <summary>
            完整的授权信息，即从授权文件中读取的所有信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.VersionLevel">
            <summary>
            版本等级
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.VersionName">
            <summary>
            版本名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.VersionLimit">
            <summary>
            当前版本的限制对象
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.LimitItems">
            <summary>
            限制项的数据集
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.ServerDomain">
            <summary>
            服务器的域名
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.ServerPort">
            <summary>
            服务器的端口
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.InitDate">
            <summary>
            学习系统开始运行的初始时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.RunTimeSpan">
            <summary>
            学习系统累计运行时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.AnalysisTime">
            <summary>
            解析授权文件的时间
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.IsAnalysis">
            <summary>
            是否解析过授权文件
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.LimitDomain">
            <summary>
            当根域授权时，限定的根域
            </summary>
        </member>
        <member name="P:WeiSha.Common.License.Value">
            <summary>
            获取系统参数
            </summary>
        </member>
        <member name="T:WeiSha.Common.ActivationType">
            <summary>
            激活码类型
            </summary>
        </member>
        <member name="T:WeiSha.Common.Entity">
            <summary>
            系统中的实体说明
            </summary>
        </member>
        <member name="M:WeiSha.Common.Entity.GetVisible(System.String)">
            <summary>
            当前实体是否显示
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Entity.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.Entity.Item(System.String)">
            <summary>
            通过键获取值的名称
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.oned.UPCEReader">
            <summary> <p>Implements decoding of the UPC-E format.</p>
            <p/>
            <p><a href="http://www.barcodeisland.com/upce.phtml">This</a> is a great reference for
            UPC-E information.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.oned.UPCEReader.MIDDLE_END_PATTERN">
            <summary> The pattern that marks the middle, and end, of a UPC-E pattern.
            There is no "second half" to a UPC-E barcode.
            </summary>
        </member>
        <member name="F:com.google.zxing.oned.UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS">
            <summary> See {@link #L_AND_G_PATTERNS}; these values similarly represent patterns of
            even-odd parity encodings of digits that imply both the number system (0 or 1)
            used, and the check digit.
            </summary>
        </member>
        <member name="M:com.google.zxing.oned.UPCEReader.convertUPCEtoUPCA(System.String)">
            <summary> Expands a UPC-E value back into its full, equivalent UPC-A code value.
            
            </summary>
            <param name="upce">UPC-E code as string of digits
            </param>
            <returns> equivalent UPC-A code as string of digits
            </returns>
        </member>
        <member name="T:com.google.zxing.oned.MultiFormatUPCEANReader">
            <summary> <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to
            read all such formats, it is most efficient to use this implementation rather than invoke
            individual readers.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.oned.Code128Reader">
            <summary> <p>Decodes Code 128 barcodes.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.reedsolomon.ReedSolomonEncoder">
            <summary> <p>Implements Reed-Solomon enbcoding, as the name implies.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  William Rucklidge
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.optional.NDEFSmartPosterResultParser">
            <summary> <p>Recognizes an NDEF message that encodes information according to the
            "Smart Poster Record Type Definition" specification.</p>
            
            <p>This actually only supports some parts of the Smart Poster format: title,
            URI, and action records. Icon records are not supported because the size
            of these records are infeasibly large for barcodes. Size and type records
            are not supported. Multiple titles are not supported.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.EmailAddressResultParser">
            <summary> Represents a result that encodes an e-mail address, either as a plain address
            like "joe@example.org" or a mailto: URL like "mailto:joe@example.org".
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.QrcodeHepler">
            <summary>
            二维码操作类
            </summary>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String,System.Int32,System.String,System.String)">
            <summary>
            生成二维码，默认是高容错图像
            </summary>
            <param name="content">要生成的文本内容</param>
            <param name="wh">二维码的宽高</param>
            <param name="color">二维码前景色</param>
            <param name="bgcolor">二维码背景色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String[],System.Int32,System.String,System.String)">
            <summary>
            批量生成二维码，默认是高容错图像
            </summary>
            <param name="content"></param>
            <param name="wh"></param>
            <param name="color"></param>
            <param name="bgcolor"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            生成二维码，可以设置容错级别
            </summary>
            <param name="content">二维码内容</param>
            <param name="corrLevel">容错级别，从低到高依次为：L、M、Q、H</param>
            <param name="wh"></param>
            <param name="color"></param>
            <param name="bgcolor"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            生成带中心图片的二维码，默认是高容错图像
            </summary>
            <param name="content">二维码内容</param>
            <param name="wh">宽高</param>
            <param name="centerImgPath">二维码中心图片的路径</param>
            <param name="color">前景色</param>
            <param name="bgcolor">背景色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String[],System.Int32,System.String,System.String,System.String)">
            <summary>
            批量生成带中心图片的二维码，默认是高容错图像
            </summary>
            <param name="content"></param>
            <param name="wh"></param>
            <param name="centerImgPath"></param>
            <param name="color"></param>
            <param name="bgcolor"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String,System.Int32,System.Drawing.Image,System.String,System.String)">
            <summary>
            生成带中心图片的二维码，默认是高容错图像
            </summary>
            <param name="content">二维码内容</param>
            <param name="wh">宽高</param>
            <param name="centerImg">二维码中心图片对象</param>
            <param name="color">前景色</param>
            <param name="bgcolor">背景色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Encode(System.String[],System.Int32,System.Drawing.Image,System.String,System.String)">
            <summary>
            批量生成带中心图片的二维码，默认是高容错图像
            </summary>
            <param name="content"></param>
            <param name="wh"></param>
            <param name="centerImg"></param>
            <param name="color"></param>
            <param name="bgcolor"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.toBitmap(com.google.zxing.common.ByteMatrix,System.String,System.String)">
            <summary>
            生成图片对象
            </summary>
            <param name="matrix"></param>
            <param name="color">前景色</param>
            <param name="bgcolor">背景色</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Decode(System.Drawing.Image)">
            <summary>
            读取二维码信息
            </summary>
            <param name="img">图片对象</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.QrcodeHepler.Decode(System.String)">
            <summary>
            读取二维码信息
            </summary>
            <param name="imgFilePath">图片所在的物理路径</param>
            <returns></returns>
        </member>
        <member name="T:SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:SupportClass.SetCapacity(System.Collections.ArrayList,System.Int32)">
            <summary>
            Sets the capacity for the specified ArrayList
            </summary>
            <param name="vector">The ArrayList which capacity will be set</param>
            <param name="newCapacity">The new capacity value</param>
        </member>
        <member name="M:SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">Byte array to process</param>
            <returns>The transformed array</returns>
        </member>
        <member name="T:com.google.zxing.LuminanceSource">
            <summary> The purpose of this class hierarchy is to abstract different bitmap implementations across
            platforms into a standard interface for requesting greyscale luminance values. The interface
            only provides immutable methods; therefore crop and rotation create copies. This is to ensure
            that one Reader does not modify the original luminance source and leave it in an unknown state
            for other Readers in the chain.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- 对于成员“M:com.google.zxing.LuminanceSource.getRow(System.Int32,System.SByte[])”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:com.google.zxing.LuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.LuminanceSource.rotateCounterClockwise">
            <summary> Returns a new object with rotated image data. Only callable if isRotateSupported() is true.
            
            </summary>
            <returns> A rotated version of this object.
            </returns>
        </member>
        <!-- 对于成员“P:com.google.zxing.LuminanceSource.Matrix”忽略有格式错误的 XML 注释 -->
        <member name="P:com.google.zxing.LuminanceSource.Width">
            <returns> The width of the bitmap.
            </returns>
        </member>
        <member name="P:com.google.zxing.LuminanceSource.Height">
            <returns> The height of the bitmap.
            </returns>
        </member>
        <member name="P:com.google.zxing.LuminanceSource.CropSupported">
            <returns> Whether this subclass supports cropping.
            </returns>
        </member>
        <member name="P:com.google.zxing.LuminanceSource.RotateSupported">
            <returns> Whether this subclass supports counter-clockwise rotation.
            </returns>
        </member>
        <member name="T:com.google.zxing.ResultPointCallback">
            <summary> Callback which is invoked when a possible result point (significant
            point in the barcode image such as a corner) is found.
            
            </summary>
            <seealso cref="F:com.google.zxing.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            </seealso>
        </member>
        <member name="T:com.google.zxing.ResultMetadataType">
            <summary> Represents some type of metadata about the result of the decoding that the decoder
            wishes to communicate back to the caller.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.ResultMetadataType.OTHER">
            <summary> Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.</summary>
        </member>
        <member name="F:com.google.zxing.ResultMetadataType.ORIENTATION">
            <summary> Denotes the likely approximate orientation of the barcode in the image. This value
            is given as degrees rotated clockwise from the normal, upright orientation.
            For example a 1D barcode which was found by reading top-to-bottom would be
            said to have orientation "90". This key maps to an {@link Integer} whose
            value is in the range [0,360).
            </summary>
        </member>
        <member name="F:com.google.zxing.ResultMetadataType.BYTE_SEGMENTS">
            <summary> <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'
            which is sometimes used to encode binary data. While {@link Result} makes available
            the complete raw bytes in the barcode for these formats, it does not offer the bytes
            from the byte segments alone.</p>
            
            <p>This maps to a {@link java.util.Vector} of byte arrays corresponding to the
            raw bytes in the byte segments in the barcode, in order.</p>
            </summary>
        </member>
        <member name="F:com.google.zxing.ResultMetadataType.ERROR_CORRECTION_LEVEL">
            <summary> Error correction level used, if applicable. The value type depends on the
            format, but is typically a String.
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel">
            <summary> <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
            defined by the QR code standard.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel.L">
            <summary> L = ~7% correction</summary>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel.M">
            <summary> M = ~15% correction</summary>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel.Q">
            <summary> Q = ~25% correction</summary>
        </member>
        <member name="F:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel.H">
            <summary> H = ~30% correction</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.decoder.ErrorCorrectionLevel.forBits(System.Int32)">
            <param name="bits">int containing the two bits encoding a QR Code's error correction level
            </param>
            <returns> {@link ErrorCorrectionLevel} representing the encoded error correction level
            </returns>
        </member>
        <member name="T:com.google.zxing.pdf417.PDF417Reader">
            <summary> This implementation can detect and decode PDF417 codes in an image.
            
            </summary>
            <author>  SITA Lab (kevin.osullivan@sita.aero)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.pdf417.PDF417Reader.decode(com.google.zxing.BinaryBitmap)">
            <summary> Locates and decodes a PDF417 code in an image.
            
            </summary>
            <returns> a String representing the content encoded by the PDF417 code
            </returns>
            <throws>  ReaderException if a PDF417 code cannot be found, or cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.PDF417Reader.extractPureBits(com.google.zxing.BinaryBitmap)">
            <summary> This method detects a barcode in a "pure" image -- that is, pure monochrome image
            which contains only an unrotated, unskewed, image of a barcode, with some white border
            around it. This is a specialized method that works exceptionally fast in this special
            case.
            </summary>
        </member>
        <member name="T:com.google.zxing.oned.ITFReader">
            <summary> <p>Implements decoding of the ITF format.</p>
            
            <p>"ITF" stands for Interleaved Two of Five. This Reader will scan ITF barcode with 6, 10 or 14
            digits. The checksum is optional and is not applied by this Reader. The consumer of the decoded
            value will have to apply a checksum if required.</p>
            
            <p><a href="http://en.wikipedia.org/wiki/Interleaved_2_of_5">http://en.wikipedia.org/wiki/Interleaved_2_of_5</a>
            is a great reference for Interleaved 2 of 5 information.</p>
            
            </summary>
            <author>  kevin.osullivan@sita.aero, SITA Lab.
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.oned.ITFReader.START_PATTERN">
            <summary> Start/end guard pattern.
            
            Note: The end pattern is reversed because the row is reversed before
            searching for the END_PATTERN
            </summary>
        </member>
        <member name="F:com.google.zxing.oned.ITFReader.PATTERNS">
            <summary> Patterns of Wide / Narrow lines to indicate each digit</summary>
        </member>
        <member name="M:com.google.zxing.oned.ITFReader.decodeMiddle(com.google.zxing.common.BitArray,System.Int32,System.Int32,System.Text.StringBuilder)">
            <param name="row">         row of black/white values to search
            </param>
            <param name="payloadStart">offset of start pattern
            </param>
            <param name="resultString">{@link StringBuffer} to append decoded chars to
            </param>
            <throws>  ReaderException if decoding could not complete successfully </throws>
        </member>
        <member name="M:com.google.zxing.oned.ITFReader.decodeStart(com.google.zxing.common.BitArray)">
            <summary> Identify where the start of the middle / payload section starts.
            
            </summary>
            <param name="row">row of black/white values to search
            </param>
            <returns> Array, containing index of start of 'start block' and end of
            'start block'
            </returns>
            <throws>  ReaderException </throws>
        </member>
        <!-- 对于成员“M:com.google.zxing.oned.ITFReader.validateQuietZone(com.google.zxing.common.BitArray,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.oned.ITFReader.skipWhiteSpace(com.google.zxing.common.BitArray)">
            <summary> Skip all whitespace until we get to the first black line.
            
            </summary>
            <param name="row">row of black/white values to search
            </param>
            <returns> index of the first black line.
            </returns>
            <throws>  ReaderException Throws exception if no black lines are found in the row </throws>
        </member>
        <member name="M:com.google.zxing.oned.ITFReader.decodeEnd(com.google.zxing.common.BitArray)">
            <summary> Identify where the end of the middle / payload section ends.
            
            </summary>
            <param name="row">row of black/white values to search
            </param>
            <returns> Array, containing index of start of 'end block' and end of 'end
            block'
            </returns>
            <throws>  ReaderException </throws>
        </member>
        <member name="M:com.google.zxing.oned.ITFReader.findGuardPattern(com.google.zxing.common.BitArray,System.Int32,System.Int32[])">
            <param name="row">      row of black/white values to search
            </param>
            <param name="rowOffset">position to start search
            </param>
            <param name="pattern">  pattern of counts of number of black and white pixels that are
            being searched for as a pattern
            </param>
            <returns> start/end horizontal offset of guard pattern, as an array of two
            ints
            </returns>
            <throws>  ReaderException if pattern is not found </throws>
        </member>
        <member name="M:com.google.zxing.oned.ITFReader.decodeDigit(System.Int32[])">
            <summary> Attempts to decode a sequence of ITF black/white lines into single
            digit.
            
            </summary>
            <param name="counters">the counts of runs of observed black/white/black/... values
            </param>
            <returns> The decoded digit
            </returns>
            <throws>  ReaderException if digit cannot be decoded </throws>
        </member>
        <member name="T:com.google.zxing.common.reedsolomon.GF256">
            <summary> <p>This class contains utility methods for performing mathematical operations over
            the Galois Field GF(256). Operations use a given primitive polynomial in calculations.</p>
            
            <p>Throughout this package, elements of GF(256) are represented as an <code>int</code>
            for convenience and speed (but at the cost of memory).
            Only the bottom 8 bits are really used.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.#ctor(System.Int32)">
            <summary> Create a representation of GF(256) using the given primitive polynomial.
            
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            the bits of an int, where the least-significant bit represents the constant
            coefficient
            </param>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.buildMonomial(System.Int32,System.Int32)">
            <returns> the monomial representing coefficient * x^degree
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.addOrSubtract(System.Int32,System.Int32)">
            <summary> Implements both addition and subtraction -- they are the same in GF(256).
            
            </summary>
            <returns> sum/difference of a and b
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.exp(System.Int32)">
            <returns> 2 to the power of a in GF(256)
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.log(System.Int32)">
            <returns> base 2 log of a in GF(256)
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.inverse(System.Int32)">
            <returns> multiplicative inverse of a
            </returns>
        </member>
        <member name="M:com.google.zxing.common.reedsolomon.GF256.multiply(System.Int32,System.Int32)">
            <param name="a">
            </param>
            <param name="b">
            </param>
            <returns> product of a and b in GF(256)
            </returns>
        </member>
        <member name="T:com.google.zxing.common.detector.MonochromeRectangleDetector">
            <summary> <p>A somewhat generic detector that looks for a barcode-like rectangular region within an image.
            It looks within a mostly white region of an image for a region of black and white, but mostly
            black. It returns the four corners of the region, as best it can determine.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.detector.MonochromeRectangleDetector.detect">
            <summary> <p>Detects a rectangular region of black and white -- mostly black -- with a region of mostly
            white, in an image.</p>
            
            </summary>
            <returns> {@link ResultPoint}[] describing the corners of the rectangular region. The first and
            last points are opposed on the diagonal, as are the second and third. The first point will be
            the topmost point and the last, the bottommost. The second point will be leftmost and the
            third, the rightmost
            </returns>
            <throws>  ReaderException if no Data Matrix Code can be found </throws>
        </member>
        <member name="M:com.google.zxing.common.detector.MonochromeRectangleDetector.findCornerFromCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Attempts to locate a corner of the barcode by scanning up, down, left or right from a center
            point which should be within the barcode.
            
            </summary>
            <param name="centerX">center's x component (horizontal)
            </param>
            <param name="deltaX">same as deltaY but change in x per step instead
            </param>
            <param name="left">minimum value of x
            </param>
            <param name="right">maximum value of x
            </param>
            <param name="centerY">center's y component (vertical)
            </param>
            <param name="deltaY">change in y per step. If scanning up this is negative; down, positive;
            left or right, 0
            </param>
            <param name="top">minimum value of y to search through (meaningless when di == 0)
            </param>
            <param name="bottom">maximum value of y
            </param>
            <param name="maxWhiteRun">maximum run of white pixels that can still be considered to be within
            the barcode
            </param>
            <returns> a {@link com.google.zxing.ResultPoint} encapsulating the corner that was found
            </returns>
            <throws>  com.google.zxing.ReaderException if such a point cannot be found </throws>
        </member>
        <member name="M:com.google.zxing.common.detector.MonochromeRectangleDetector.blackWhiteRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Computes the start and end of a region of pixels, either horizontally or vertically, that could
            be part of a Data Matrix barcode.
            
            </summary>
            <param name="fixedDimension">if scanning horizontally, this is the row (the fixed vertical location)
            where we are scanning. If scanning vertically it's the column, the fixed horizontal location
            </param>
            <param name="maxWhiteRun">largest run of white pixels that can still be considered part of the
            barcode region
            </param>
            <param name="minDim">minimum pixel location, horizontally or vertically, to consider
            </param>
            <param name="maxDim">maximum pixel location, horizontally or vertically, to consider
            </param>
            <param name="horizontal">if true, we're scanning left-right, instead of up-down
            </param>
            <returns> int[] with start and end of found range, or null if no such range is found
            (e.g. only white was found)
            </returns>
        </member>
        <member name="T:com.google.zxing.common.DefaultGridSampler">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.BitSource">
            <summary> <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the
            number of bits read is not often a multiple of 8.</p>
            
            <p>This class is thread-safe but not reentrant. Unless the caller modifies the bytes array
            it passed in, in which case all bets are off.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.BitSource.#ctor(System.SByte[])">
            <param name="bytes">bytes from which this will read bits. Bits will be read from the first byte first.
            Bits are read within a byte from most-significant to least-significant bit.
            </param>
        </member>
        <member name="M:com.google.zxing.common.BitSource.readBits(System.Int32)">
            <param name="numBits">number of bits to read
            </param>
            <returns> int representing the bits read. The bits will appear as the least-significant
            bits of the int
            </returns>
            <throws>  IllegalArgumentException if numBits isn't in [1,32] </throws>
        </member>
        <member name="M:com.google.zxing.common.BitSource.available">
            <returns> number of bits that can be read successfully
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.URLTOResultParser">
            <summary> Parses the "URLTO" result format, which is of the form "URLTO:[title]:[url]".
            This seems to be used sometimes, but I am not able to find documentation
            on its origin or official format?
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.Param.Method.Position">
            <summary>
            获取访问者的地理位置，可以通过GPS与IP
            </summary>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position.#ctor(System.String)">
            <summary>
            通过IP获取地理位置的构造
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position.#ctor(System.String,System.String)">
            <summary>
            通过GPS信息获取地理位置
            </summary>
            <param name="lng">百度经度坐标</param>
            <param name="lat">百度纬度坐标</param>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position.#ctor(System.String,System.Int32)">
            <summary>
            通过地址，获取地理位置信息
            </summary>
            <param name="address"></param>
            <param name="type">结果类型,1为xml,2为json</param>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position._getPosiForIP(System.String)">
            <summary>
            通过IP获取地理位置的方法
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position._clearNoChinise(System.String)">
            <summary>
            去除非汉字
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position._unicodeToGB(System.String)">
            <summary>
            Unicode转GB字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method.Position._getJson(System.String,System.String)">
            <summary>
            解析json信息
            </summary>
            <param name="result"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.IPAddress">
            <summary>
            当前访问者的客户端IP地址
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.Latitude">
            <summary>
            当前访问者所在的纬度
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.Longitude">
            <summary>
            当前访问者所在的经度
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.Province">
            <summary>
            当前访问者所在的省份信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.City">
            <summary>
            当前访问者所在的城市信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.District">
            <summary>
            当前访问者所在的区县信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.Street">
            <summary>
            当前访问者所在的街道
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method.Position.StreetNumber">
            <summary>
            当前访问者所在的门牌号
            </summary>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.Thumbnail(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成缩略图，非变形剪切；
            </summary>
            <param name="sourceFile">原文件地址</param>
            <param name="thFile">缩略图文件地址</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="restrainObj">约束对象，1为按度约束，高度按宽的比较计算；2为按高约束；0为自适应</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.OverlayImage(System.String,System.String,System.String,System.Int32)">
            <summary>
            图片叠加，例如生成水印图片
            </summary>
            <param name="sourceFile">原文件地址</param>
            <param name="overFile">要叠加的图片文件地址</param>
            <param name="overType"></param>
            <param name="opacity"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.OverlayText(System.String,System.String,System.String,System.Int32)">
            <summary>
            图片文件叠加
            </summary>
            <param name="sourceFile">原文件</param>
            <param name="text">要叠加的文字</param>
            <param name="overType">叠加的位置</param>
            <param name="opacity"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.Zoom(System.String,System.Int32,System.Int32)">
            <summary>
            图片缩放，强制大小尺寸
            </summary>
            <param name="sourceFile"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.Zoom(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            图片缩放，强制大小尺寸
            </summary>
            <param name="sourceFile"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="isDeformation">是否允许变形，如果不允许，则会剪切图形；</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.ToImage(System.String)">
            <summary>
            将图片文件转为Iamge对象
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Images.FileTo.ToBase64(System.String)">
            <summary>
            图片文件转Base64，如果在网页中引用，请加上data:image/jpeg;base64,
            </summary>
            <param name="imgFile"></param>
            <returns></returns>
        </member>
        <member name="T:com.google.zxing.Result">
            <summary> <p>Encapsulates the result of decoding a barcode within an image.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="P:com.google.zxing.Result.Text">
            <returns> raw text encoded by the barcode, if applicable, otherwise <code>null</code>
            </returns>
        </member>
        <member name="P:com.google.zxing.Result.RawBytes">
            <returns> raw bytes encoded by the barcode, if applicable, otherwise <code>null</code>
            </returns>
        </member>
        <member name="P:com.google.zxing.Result.ResultPoints">
            <returns> points related to the barcode in the image. These are typically points
            identifying finder patterns or the corners of the barcode. The exact meaning is
            specific to the type of barcode that was decoded.
            </returns>
        </member>
        <member name="P:com.google.zxing.Result.BarcodeFormat">
            <returns> {@link BarcodeFormat} representing the format of the barcode that was decoded
            </returns>
        </member>
        <member name="P:com.google.zxing.Result.ResultMetadata">
            <returns> {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be
            <code>null</code>. This contains optional metadata about what was detected about the barcode,
            like orientation.
            </returns>
        </member>
        <member name="T:com.google.zxing.common.DecoderResult">
            <summary> <p>Encapsulates the result of decoding a matrix of bits. This typically
            applies to 2D barcode formats. For now it contains the raw bytes obtained,
            as well as a String interpretation of those bytes, if applicable.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.TelParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.BookmarkDoCoMoResultParser">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.Skip">
            <summary>
            页面跳转，如果是手机端访问电脑端，则跳转到指定手机端，通过web.config中的skip配置项
            </summary>
        </member>
        <member name="M:WeiSha.Common.Skip._init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:WeiSha.Common.Skip.forWeb(System.String)">
            <summary>
            通过web页，获取对应的mobile
            </summary>
            <param name="path">web页</param>
            <returns>mobile页</returns>
        </member>
        <member name="M:WeiSha.Common.Skip.forMoible(System.String)">
            <summary>
            通过mobile页，获取对应的web页
            </summary>
            <param name="path">mobile页</param>
            <returns>web页</returns>
        </member>
        <member name="M:WeiSha.Common.Skip.GetUrl">
            <summary>
            返回跳转的页面
            </summary>
            <returns>返回跳转的页面</returns>
        </member>
        <member name="M:WeiSha.Common.Skip.isMobilePage">
            <summary>
            是否是手机端
            </summary>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Skip.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="T:WeiSha.Common.Skip.SkipItem">
            <summary>
            配置项
            </summary>
        </member>
        <member name="T:WeiSha.Common.IDCardNumber">
            <summary>
            身份证号码解析与生成
            </summary>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber.FillAreas">
            <summary>
            获取区域信息
            </summary>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber.Get(System.String)">
            <summary>
            解析身份证信息
            </summary>
            <param name="idCardNumber"></param>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber.CheckIDCardNumber(System.String)">
            <summary>
            校验身份证号码是否合法
            </summary>
            <param name="idCardNumber"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber.Radom">
            <summary>
            随机生成一个身份证号
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber.Radom(System.Int32)">
            <summary>
            批量生成身份证
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber._radomCardNumber(System.Int32)">
            <summary>
            生成随身份证号
            </summary>
            <param name="seed">随机数种子</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.IDCardNumber._analysis">
            <summary>
            解析身份证
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Province">
            <summary>
            所在省份信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Area">
            <summary>
            所在地区信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.City">
            <summary>
            所在区县信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Birthday">
            <summary>
            出生日期
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Sex">
            <summary>
            性别，1为男，2为女
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.CardNumber">
            <summary>
            身份证号码
            </summary>
        </member>
        <member name="P:WeiSha.Common.IDCardNumber.Json">
            <summary>
            生成Javascript对象；
            </summary>
        </member>
        <member name="T:WeiSha.Common.Parameters.Authorization.VersionLevel">
            <summary>
            当前版本的等级
            </summary>
        </member>
        <member name="M:WeiSha.Common.Parameters.Authorization.VersionLevel.GetLevelName(System.Int32)">
            <summary>
            获取版本名称
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Parameters.Authorization.VersionLevel.GetLevelLimit(System.Int32)">
            <summary>
            获取当前版本等级的各项限制
            </summary>
            <param name="level">版本等级</param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLevel.Level">
            <summary>
            版本等级信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLevel.Limit">
            <summary>
            各版本的限制项
            </summary>
        </member>
        <member name="P:WeiSha.Common.Parameters.Authorization.VersionLevel.LevelTable">
            <summary>
            所有版本等级的各项数据组成的表
            </summary>
        </member>
        <member name="T:WeiSha.Common.App">
            <summary>
            系统参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.App.Get">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="P:WeiSha.Common.App.Version">
            <summary>
            应用程序版本号
            </summary>
        </member>
        <member name="T:WeiSha.Common.Cache`1">
            <summary>
            缓存数据，以减少对数据库的读取次数
            </summary>
        </member>
        <member name="F:WeiSha.Common.Cache`1.list">
            <summary>
            缓存集
            </summary>
        </member>
        <member name="M:WeiSha.Common.Cache`1.#ctor(System.String)">
            <summary>
            构造缓存
            </summary>
            <param name="cacheName">缓存名称</param>
        </member>
        <member name="P:WeiSha.Common.Cache`1.Name">
            <summary>
            缓存名称
            </summary>
        </member>
        <member name="P:WeiSha.Common.Cache`1.Data">
            <summary>
            缓存的数据集
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:WeiSha.Common.CacheDataCollection`1">
            <summary>
            缓存的数据集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.#ctor(System.String)">
            <summary>
            构造缓存
            </summary>
            <param name="cacheType">缓存类型</param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.#ctor">
            <summary>
            构造缓存
            </summary>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Add(`0)">
            <summary>
            添加缓存对象
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Delete(System.Int32)">
            <summary>
            按索引删除缓存对象
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Delete(`0)">
            <summary>
            删除索引对象
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Update(`0,`0)">
            <summary>
            更新
            </summary>
            <param name="old"></param>
            <param name="_new"></param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Clear">
            <summary>
            清理所有缓存对象
            </summary>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Fill(`0[])">
            <summary>
            填充缓存数据
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:WeiSha.Common.CacheDataCollection`1.Fresh(`0[])">
            <summary>
            刷新数据
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:WeiSha.Common.CacheDataCollection`1.List">
            <summary>
            被缓存的数据集，列表形式存放
            </summary>
        </member>
        <member name="P:WeiSha.Common.CacheDataCollection`1.Array">
            <summary>
            被缓存的数据集，数组形式存放
            </summary>
        </member>
        <member name="T:com.google.zxing.qrcode.encoder.QRCode">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.qrcode.encoder.BitVector">
            <summary> JAVAPORT: This should be combined with BitArray in the future, although that class is not yet
            dynamically resizeable. This implementation is reasonable but there is a lot of function calling
            in loops I'd like to get rid of.
            
            </summary>
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.datamatrix.decoder.Decoder">
            <summary> <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting
            the Data Matrix Code from an image.</p>
            
            </summary>
            <author>  bbrown@google.com (Brian Brown)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.Decoder.decode(System.Boolean[][])">
            <summary> <p>Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans.
            "true" is taken to mean a black module.</p>
            
            </summary>
            <param name="image">booleans representing white/black Data Matrix Code modules
            </param>
            <returns> text and bytes encoded within the Data Matrix Code
            </returns>
            <throws>  ReaderException if the Data Matrix Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.Decoder.decode(com.google.zxing.common.BitMatrix)">
            <summary> <p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or "true" is taken
            to mean a black module.</p>
            
            </summary>
            <param name="bits">booleans representing white/black Data Matrix Code modules
            </param>
            <returns> text and bytes encoded within the Data Matrix Code
            </returns>
            <throws>  ReaderException if the Data Matrix Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.datamatrix.decoder.Decoder.correctErrors(System.SByte[],System.Int32)">
            <summary> <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
            correct the errors in-place using Reed-Solomon error correction.</p>
            
            </summary>
            <param name="codewordBytes">data and error correction codewords
            </param>
            <param name="numDataCodewords">number of codewords that are data bytes
            </param>
            <throws>  ReaderException if error correction fails </throws>
        </member>
        <member name="T:com.google.zxing.common.PerspectiveTransform">
            <summary> <p>This class implements a perspective transform in two dimensions. Given four source and four
            destination points, it will compute the transformation implied between them. The code is based
            directly upon section 3.4.2 of George Wolberg's "Digital Image Warping"; see pages 54-56.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.PerspectiveTransform.transformPoints(System.Single[],System.Single[])">
            <summary>Convenience method, not optimized for performance. </summary>
        </member>
        <member name="T:com.google.zxing.client.result.CalendarParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.client.result.CalendarParsedResult.validateDate(System.String)">
            <summary> RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME
            (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).
            
            </summary>
            <param name="date">The string to validate
            </param>
        </member>
        <!-- 对于成员“P:com.google.zxing.client.result.CalendarParsedResult.Start”忽略有格式错误的 XML 注释 -->
        <member name="P:com.google.zxing.client.result.CalendarParsedResult.End">
            <seealso cref="!:getStart()May return null if the event has no duration.">
            </seealso>
        </member>
        <member name="T:com.google.zxing.qrcode.encoder.MatrixUtil">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.qrcode.encoder.Encoder">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.encode(System.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.encoder.QRCode)">
            <summary>  Encode "bytes" with the error correction level "ecLevel". The encoding mode will be chosen
            internally by chooseMode(). On success, store the result in "qrCode".
            
            We recommend you to use QRCode.EC_LEVEL_L (the lowest level) for
            "getECLevel" since our primary use is to show QR code on desktop screens. We don't need very
            strong error correction for this purpose.
            
            Note that there is no way to encode bytes in MODE_KANJI. We might want to add EncodeWithMode()
            with which clients can specify the encoding mode. For now, we don't need the functionality.
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.getAlphanumericCode(System.Int32)">
            <returns> the code point of the table used in alphanumeric mode or
            -1 if there is no corresponding code in the table.
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.chooseMode(System.String,System.String)">
            <summary> Choose the best mode by examining the content. Note that 'encoding' is used as a hint;
            if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.initQRCode(System.Int32,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.QRCode)">
            <summary> Initialize "qrCode" according to "numInputBytes", "ecLevel", and "mode". On success,
            modify "qrCode".
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.terminateBits(System.Int32,com.google.zxing.qrcode.encoder.BitVector)">
            <summary> Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.getNumDataBytesAndNumECBytesForBlockID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary> Get number of data bytes and number of error correction bytes for block id "blockID". Store
            the result in "numDataBytesInBlock", and "numECBytesInBlock". See table 12 in 8.5.1 of
            JISX0510:2004 (p.30)
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.interleaveWithECBytes(com.google.zxing.qrcode.encoder.BitVector,System.Int32,System.Int32,System.Int32,com.google.zxing.qrcode.encoder.BitVector)">
            <summary> Interleave "bits" with corresponding error correction bytes. On success, store the result in
            "result". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.appendModeInfo(com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.BitVector)">
            <summary> Append mode info. On success, store the result in "bits".</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.appendLengthInfo(System.Int32,System.Int32,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.BitVector)">
            <summary> Append length info. On success, store the result in "bits".</summary>
        </member>
        <member name="M:com.google.zxing.qrcode.encoder.Encoder.appendBytes(System.String,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.BitVector,System.String)">
            <summary> Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits".</summary>
        </member>
        <member name="T:com.google.zxing.pdf417.decoder.Decoder">
            <summary> <p>The main class which implements PDF417 Code decoding -- as
            opposed to locating and extracting the PDF417 Code from an image.</p>
            
            </summary>
            <author>  SITA Lab (kevin.osullivan@sita.aero)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.Decoder.decode(System.Boolean[][])">
            <summary> <p>Convenience method that can decode a PDF417 Code represented as a 2D array of booleans.
            "true" is taken to mean a black module.</p>
            
            </summary>
            <param name="image">booleans representing white/black PDF417 modules
            </param>
            <returns> text and bytes encoded within the PDF417 Code
            </returns>
            <throws>  ReaderException if the PDF417 Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.Decoder.decode(com.google.zxing.common.BitMatrix)">
            <summary> <p>Decodes a PDF417 Code represented as a {@link BitMatrix}.
            A 1 or "true" is taken to mean a black module.</p>
            
            </summary>
            <param name="bits">booleans representing white/black PDF417 Code modules
            </param>
            <returns> text and bytes encoded within the PDF417 Code
            </returns>
            <throws>  ReaderException if the PDF417 Code cannot be decoded </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.Decoder.verifyCodewordCount(System.Int32[],System.Int32)">
            <summary> Verify that all is OK with the codeword array.
            
            </summary>
            <param name="codewords">
            </param>
            <returns> an index to the first data codeword.
            </returns>
            <throws>  ReaderException </throws>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.Decoder.correctErrors(System.Int32[],System.Int32[],System.Int32)">
            <summary> <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
            correct the errors in-place using Reed-Solomon error correction.</p>
            
            </summary>
            <param name="codewords">  data and error correction codewords
            </param>
            <throws>  ReaderException if error correction fails </throws>
        </member>
        <member name="T:com.google.zxing.client.result.optional.NDEFTextResultParser">
            <summary> Recognizes an NDEF message that encodes text according to the
            "Text Record Type Definition" specification.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.Param.Method._Path">
            <summary>
            用于处理上传路径的类
            </summary>
        </member>
        <member name="M:WeiSha.Common.Param.Method._Path.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="root">根目录</param>
            <param name="path"></param>
        </member>
        <member name="M:WeiSha.Common.Param.Method._Path.getLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="path">文件夹路径</param>
            <returns>返回文件夹大小 ,单位字节</returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method._Path.GetSize(System.UInt64)">
            <summary>
            获取模版的大小,转换单位mb或kb
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Param.Method._Path.DeleteFile(System.String)">
            <summary>
            删除当前文件夹下的文件，如果有缩略图，同时删除缩略图
            </summary>
            <param name="filename"></param>
            <returns>上传成功，则返回1；否则返回0</returns>
        </member>
        <member name="P:WeiSha.Common.Param.Method._Path.Physics">
            <summary>
            物理路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method._Path.Virtual">
            <summary>
            虚拟路径
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method._Path.String">
            <summary>
            原始值，即直接从web.config读取来的，未处理的值
            </summary>
        </member>
        <member name="P:WeiSha.Common.Param.Method._Path.Length">
            <summary>
            获取文件夹大小
            </summary>
            <param name="path">文件夹路径</param>
            <returns>返回文件夹大小 ,单位字节</returns>
        </member>
        <member name="T:com.google.zxing.qrcode.detector.FinderPattern">
            <summary> <p>Encapsulates a finder pattern, which are the three square patterns found in
            the corners of QR Codes. It also encapsulates a count of similar finder patterns,
            as a convenience to the finder's bookkeeping.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.FinderPattern.aboutEquals(System.Single,System.Single,System.Single)">
            <summary> <p>Determines if this finder pattern "about equals" a finder pattern at the stated
            position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
            </summary>
        </member>
        <!-- 对于成员“T:com.google.zxing.qrcode.detector.AlignmentPatternFinder”忽略有格式错误的 XML 注释 -->
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.#ctor(com.google.zxing.common.BitMatrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,com.google.zxing.ResultPointCallback)">
            <summary> <p>Creates a finder that will look in a portion of the whole image.</p>
            
            </summary>
            <param name="image">image to search
            </param>
            <param name="startX">left column from which to start searching
            </param>
            <param name="startY">top row from which to start searching
            </param>
            <param name="width">width of region to search
            </param>
            <param name="height">height of region to search
            </param>
            <param name="moduleSize">estimated module size so far
            </param>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.find">
            <summary> <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since
            it's pretty performance-critical and so is written to be fast foremost.</p>
            
            </summary>
            <returns> {@link AlignmentPattern} if found
            </returns>
            <throws>  ReaderException if not found </throws>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.centerFromEnd(System.Int32[],System.Int32)">
            <summary> Given a count of black/white/black pixels just seen and an end position,
            figures the location of the center of this black/white/black run.
            </summary>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.foundPatternCross(System.Int32[])">
            <param name="stateCount">count of black/white/black pixels just read
            </param>
            <returns> true iff the proportions of the counts is close enough to the 1/1/1 ratios
            used by alignment patterns to be considered a match
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.crossCheckVertical(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>After a horizontal scan finds a potential alignment pattern, this method
            "cross-checks" by scanning down vertically through the center of the possible
            alignment pattern to see if the same proportion is detected.</p>
            
            </summary>
            <param name="startI">row where an alignment pattern was detected
            </param>
            <param name="centerJ">center of the section that appears to cross an alignment pattern
            </param>
            <param name="maxCount">maximum reasonable number of modules that should be
            observed in any reading state, based on the results of the horizontal scan
            </param>
            <returns> vertical center of alignment pattern, or {@link Float#NaN} if not found
            </returns>
        </member>
        <member name="M:com.google.zxing.qrcode.detector.AlignmentPatternFinder.handlePossibleCenter(System.Int32[],System.Int32,System.Int32)">
            <summary> <p>This is called when a horizontal scan finds a possible alignment pattern. It will
            cross check with a vertical scan, and if successful, will see if this pattern had been
            found on a previous horizontal scan. If so, we consider it confirmed and conclude we have
            found the alignment pattern.</p>
            
            </summary>
            <param name="stateCount">reading state module counts from horizontal scan
            </param>
            <param name="i">row where alignment pattern may be found
            </param>
            <param name="j">end of possible alignment pattern in row
            </param>
            <returns> {@link AlignmentPattern} if we have found the same pattern twice, or null if not
            </returns>
        </member>
        <member name="T:com.google.zxing.pdf417.decoder.BitMatrixParser">
            <summary> <p>
            This class parses the BitMatrix image into codewords.
            </p>
            
            </summary>
            <author>  SITA Lab (kevin.osullivan@sita.aero)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.BitMatrixParser.readCodewords">
            <summary> To ensure separability of rows, codewords of consecutive rows belong to
            different subsets of all possible codewords. This routine scans the
            symbols in the barcode. When it finds a number of consecutive rows which
            are the same, it assumes that this is a row of codewords and processes
            them into a codeword array.
            
            </summary>
            <returns> an array of codewords.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.BitMatrixParser.trimArray(System.Int32[],System.Int32)">
            <summary> Trim the array to the required size.
            
            </summary>
            <param name="array">the array
            </param>
            <param name="size"> the size to trim it to
            </param>
            <returns> the new trimmed array
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.BitMatrixParser.processRow(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary> Convert the symbols in the row to codewords.
            Each PDF417 symbol character consists of four bar elements and four space
            elements, each of which can be one to six modules wide. The four bar and
            four space elements shall measure 17 modules in total.
            
            </summary>
            <param name="rowCounters">an array containing the counts of black pixels for each column
            in the row.
            </param>
            <param name="rowNumber">  the current row number of codewords.
            </param>
            <param name="rowHeight">  the height of this row in pixels.
            </param>
            <param name="codewords">  the codeword array to save codewords into.
            </param>
            <param name="next">       the next available index into the codewords array.
            </param>
            <returns> the next available index into the codeword array after processing
            this row.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.BitMatrixParser.getCodeword(System.Int64)">
            <summary> Translate the symbol into a codeword.
            
            </summary>
            <param name="symbol">
            </param>
            <returns> the codeword corresponding to the symbol.
            </returns>
        </member>
        <member name="M:com.google.zxing.pdf417.decoder.BitMatrixParser.findCodewordIndex(System.Int64)">
            <summary> Use a binary search to find the index of the codeword corresponding to
            this symbol.
            
            </summary>
            <param name="symbol">the symbol from the barcode.
            </param>
            <returns> the index into the codeword table.
            </returns>
        </member>
        <member name="F:com.google.zxing.pdf417.decoder.BitMatrixParser.SYMBOL_TABLE">
            <summary> The sorted table of all possible symbols. Extracted from the PDF417
            specification. The index of a symbol in this table corresponds to the
            index into the codeword table.
            </summary>
        </member>
        <member name="F:com.google.zxing.pdf417.decoder.BitMatrixParser.CODEWORD_TABLE">
            <summary> This table contains to codewords for all symbols.</summary>
        </member>
        <member name="P:com.google.zxing.pdf417.decoder.BitMatrixParser.Erasures">
            <summary> Returns an array of locations representing the erasures.</summary>
        </member>
        <member name="T:com.google.zxing.EncodeHintType">
            <summary> These are a set of hints that you may pass to Writers to specify their behavior.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:com.google.zxing.EncodeHintType.ERROR_CORRECTION">
            <summary> Specifies what degree of error correction to use, for example in QR Codes (type Integer).</summary>
        </member>
        <member name="F:com.google.zxing.EncodeHintType.CHARACTER_SET">
            <summary> Specifies what character encoding to use where applicable (type String)</summary>
        </member>
        <member name="T:com.google.zxing.common.reedsolomon.ReedSolomonException">
            <summary> <p>Thrown when an exception occurs during Reed-Solomon decoding, such as when
            there are too many errors to correct.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.common.ByteArray">
            <summary> This class implements an array of unsigned bytes.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.common.ByteArray.at(System.Int32)">
            <summary> Access an unsigned byte at location index.</summary>
            <param name="index">The index in the array to access.
            </param>
            <returns> The unsigned value of the byte as an int.
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.URIParsedResult">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:com.google.zxing.client.result.URIParsedResult.massageURI(System.String)">
            <summary> Transforms a string that represents a URI into something more proper, by adding or canonicalizing
            the protocol.
            </summary>
        </member>
        <member name="P:com.google.zxing.client.result.URIParsedResult.PossiblyMaliciousURI">
            <returns> true if the URI contains suspicious patterns that may suggest it intends to
            mislead the user about its true nature. At the moment this looks for the presence
            of user/password syntax in the host/authority portion of a URI which may be used
            in attempts to make the URI's host appear to be other than it is. Example:
            http://yourbank.com@phisher.com  This URI connects to phisher.com but may appear
            to connect to yourbank.com at first glance.
            </returns>
        </member>
        <member name="T:com.google.zxing.client.result.optional.NDEFRecord">
            <summary> <p>Represents a record in an NDEF message. This class only supports certain types
            of records -- namely, non-chunked records, where ID length is omitted, and only
            "short records".</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.ISBNParsedResult">
            <author>  jbreiden@google.com (Jeff Breidenbach)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:com.google.zxing.client.result.AddressBookDoCoMoResultParser">
            <summary> Implements the "MECARD" address book entry format.
            
            Supported keys: N, SOUND, TEL, EMAIL, NOTE, ADR, BDAY, URL, plus ORG
            Unsupported keys: TEL-AV, NICKNAME
            
            Except for TEL, multiple values for keys are also not supported;
            the first one found takes precedence.
            
            Our understanding of the MECARD format is based on this document:
            
            http://www.mobicode.org.tw/files/OMIA%20Mobile%20Bar%20Code%20Standard%20v3.2.1.doc 
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:WeiSha.Common.Template">
            <summary>
            系统模板信息
            </summary>
        </member>
        <member name="F:WeiSha.Common.Template.TemplateNodeName">
            <summary>
            配置项的节点名称
            </summary>
        </member>
        <member name="M:WeiSha.Common.Template.ForAny(System.String)">
            <summary>
            根据分类返回指定类型的模版库
            </summary>
            <param name="type">模板库分类名称，如Web、Mobile</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Template.GetTemplate(System.String,System.String)">
            <summary>
            获取模板库
            </summary>
            <param name="type">模板类型，如web，mobi</param>
            <param name="tag">模板库的标识，即文件夹名称</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Template.GetTemplates">
            <summary>
            获取所有模板库
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Template.RefreshTemplate">
            <summary>
            刷新模板信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.All">
            <summary>
            所有模板配置项
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.ForWeb">
            <summary>
            电脑网页模板的集合
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.ForMobile">
            <summary>
            手机网页的模板的集合
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.Path">
            <summary>
            模板所处的根文件夹
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.IsTrim">
            <summary>
            是否精简模样html代码（去掉换行、空格、注释等）
            </summary>
        </member>
        <member name="P:WeiSha.Common.Template.Homepage">
            <summary>
            模板的默认首页
            </summary>
        </member>
        <member name="T:WeiSha.Common.Request">
            <summary>
            获取各种参数，如QueryString、Form、Cookies、Session等
            </summary>
        </member>
        <member name="M:WeiSha.Common.Request.GetObjectPropertyValue``1(``0,System.String)">
            <summary>
            获取属性的值
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="t">对象</param>
            <param name="propertyname">属性</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.#ctor(System.String)">
            <summary>
            构造字符串类的参数，如post,get,cookies,session等
            </summary>
            <param name="requestType"></param>
        </member>
        <member name="M:WeiSha.Common.Request.#ctor(System.Web.UI.WebControls.WebControl)">
            <summary>
            构造控件类的参数，如TextBox
            </summary>
            <param name="requestControlName"></param>
        </member>
        <member name="M:WeiSha.Common.Request.Random">
            <summary>
            生成随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.Random(System.Int32,System.Int32)">
            <summary>
            生成随机字符串，可以选择长度与类型
            </summary>
            <param name="VcodeNum">随机字符串的长度</param>
            <param name="type">生成的随机数类型，0为数字与大小写字母，1为纯数字，2为纯小字母，3为纯大写字母，4为大小写字母，5数字加小写，6数字加大写，</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.UniqueID">
            <summary>
            生成唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.Path(System.String)">
            <summary>
            路径的操作
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.Position(System.String,System.String)">
            <summary>
            通过经纬度获取访问者的地理信息
            </summary>
            <param name="lng">经度</param>
            <param name="lat">纬度</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.GetSize(System.UInt64)">
            <summary>
            获取模版的大小,转换单位mb或kb
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.HttpGet(System.String)">
            <summary>
            获取网页的返回结果
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.HttpPost(System.String,System.String)">
            <summary>
            Post方式获取网页的返回结果
            </summary>
            <param name="url">网址</param>
            <param name="json">json格式参数</param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.HttpPost(System.String)">
            <summary>
             Post方式获取网页的返回结果
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:WeiSha.Common.Request.LoadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="url">文件网址</param>
            <param name="filepath">本地路径</param>
        </member>
        <member name="P:WeiSha.Common.Request.QueryString">
            <summary>
             获取 HTTP 查询字符串变量集合
            </summary>    
        </member>
        <member name="P:WeiSha.Common.Request.Form">
            <summary>
            获取窗体变量集合
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.Cookies">
            <summary>
             获取客户端发送的 cookie 的集合
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.Session">
            <summary>
            获取 ASP.NET 提供的当前 Session 对象
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.Page">
            <summary>
            获取当前页面的信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.Item(System.String)">
            <summary>
            返回QueryString参数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:WeiSha.Common.Request.Controls">
            <summary>
            当前页的Web控件
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.IP">
            <summary>
            当访问的IP信息，包括其地理信息
            </summary>
        </member>
        <member name="P:WeiSha.Common.Request.Copyright">
            <summary>
            获取版本信息
            </summary>
        </member>
    </members>
</doc>
